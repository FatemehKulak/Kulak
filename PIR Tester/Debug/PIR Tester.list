
PIR Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000058  20000000  08003708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000048c  20000058  08003760  00020058  2**3
                  ALLOC
  7 ._user_heap_stack 00000200  200004e4  08003760  000204e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009899  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ae3  00000000  00000000  0002991a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000710  00000000  00000000  0002b400  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  0002bb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000332e  00000000  00000000  0002c138  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000219b  00000000  00000000  0002f466  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00031601  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001d5c  00000000  00000000  00031680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000058 	.word	0x20000058
 8000204:	00000000 	.word	0x00000000
 8000208:	08003464 	.word	0x08003464

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000005c 	.word	0x2000005c
 8000224:	08003464 	.word	0x08003464

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800038a:	f1a4 0401 	sub.w	r4, r4, #1
 800038e:	d1e9      	bne.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f092 0f00 	teq	r2, #0
 8000536:	bf14      	ite	ne
 8000538:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e720      	b.n	8000390 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aedc 	beq.w	800033e <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6c1      	b.n	800033e <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__aeabi_d2uiz>:
 80009e0:	004a      	lsls	r2, r1, #1
 80009e2:	d211      	bcs.n	8000a08 <__aeabi_d2uiz+0x28>
 80009e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e8:	d211      	bcs.n	8000a0e <__aeabi_d2uiz+0x2e>
 80009ea:	d50d      	bpl.n	8000a08 <__aeabi_d2uiz+0x28>
 80009ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009f4:	d40e      	bmi.n	8000a14 <__aeabi_d2uiz+0x34>
 80009f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a02:	fa23 f002 	lsr.w	r0, r3, r2
 8000a06:	4770      	bx	lr
 8000a08:	f04f 0000 	mov.w	r0, #0
 8000a0c:	4770      	bx	lr
 8000a0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_d2uiz+0x3a>
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0000 	mov.w	r0, #0
 8000a1e:	4770      	bx	lr

08000a20 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	78db      	ldrb	r3, [r3, #3]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	78db      	ldrb	r3, [r3, #3]
 8000a50:	f003 0310 	and.w	r3, r3, #16
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d005      	beq.n	8000a64 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	789b      	ldrb	r3, [r3, #2]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d044      	beq.n	8000af8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	e038      	b.n	8000aec <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d126      	bne.n	8000ae6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	78db      	ldrb	r3, [r3, #3]
 8000ac4:	2b28      	cmp	r3, #40	; 0x28
 8000ac6:	d105      	bne.n	8000ad4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	409a      	lsls	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	615a      	str	r2, [r3, #20]
 8000ad2:	e008      	b.n	8000ae6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	78db      	ldrb	r3, [r3, #3]
 8000ad8:	2b48      	cmp	r3, #72	; 0x48
 8000ada:	d104      	bne.n	8000ae6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000adc:	2201      	movs	r2, #1
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	2b07      	cmp	r3, #7
 8000af0:	d9c3      	bls.n	8000a7a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	2bff      	cmp	r3, #255	; 0xff
 8000afe:	d946      	bls.n	8000b8e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	e03a      	b.n	8000b82 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	3308      	adds	r3, #8
 8000b10:	2201      	movs	r2, #1
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d127      	bne.n	8000b7c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000b32:	220f      	movs	r2, #15
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	4013      	ands	r3, r2
 8000b44:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	78db      	ldrb	r3, [r3, #3]
 8000b58:	2b28      	cmp	r3, #40	; 0x28
 8000b5a:	d105      	bne.n	8000b68 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	3308      	adds	r3, #8
 8000b60:	2201      	movs	r2, #1
 8000b62:	409a      	lsls	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	78db      	ldrb	r3, [r3, #3]
 8000b6c:	2b48      	cmp	r3, #72	; 0x48
 8000b6e:	d105      	bne.n	8000b7c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	3308      	adds	r3, #8
 8000b74:	2201      	movs	r2, #1
 8000b76:	409a      	lsls	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	d9c1      	bls.n	8000b0c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	605a      	str	r2, [r3, #4]
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e001      	b.n	8000bbe <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000bda:	787b      	ldrb	r3, [r7, #1]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000be0:	887a      	ldrh	r2, [r7, #2]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000be6:	e002      	b.n	8000bee <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	615a      	str	r2, [r3, #20]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000c10:	4b4c      	ldr	r3, [pc, #304]	; (8000d44 <RCC_GetClocksFreq+0x14c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d007      	beq.n	8000c30 <RCC_GetClocksFreq+0x38>
 8000c20:	2b08      	cmp	r3, #8
 8000c22:	d009      	beq.n	8000c38 <RCC_GetClocksFreq+0x40>
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d133      	bne.n	8000c90 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a47      	ldr	r2, [pc, #284]	; (8000d48 <RCC_GetClocksFreq+0x150>)
 8000c2c:	601a      	str	r2, [r3, #0]
      break;
 8000c2e:	e033      	b.n	8000c98 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a45      	ldr	r2, [pc, #276]	; (8000d48 <RCC_GetClocksFreq+0x150>)
 8000c34:	601a      	str	r2, [r3, #0]
      break;
 8000c36:	e02f      	b.n	8000c98 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000c38:	4b42      	ldr	r3, [pc, #264]	; (8000d44 <RCC_GetClocksFreq+0x14c>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c40:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000c42:	4b40      	ldr	r3, [pc, #256]	; (8000d44 <RCC_GetClocksFreq+0x14c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	0c9b      	lsrs	r3, r3, #18
 8000c50:	3302      	adds	r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d106      	bne.n	8000c68 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4a3b      	ldr	r2, [pc, #236]	; (8000d4c <RCC_GetClocksFreq+0x154>)
 8000c5e:	fb02 f203 	mul.w	r2, r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000c66:	e017      	b.n	8000c98 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000c68:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <RCC_GetClocksFreq+0x14c>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <RCC_GetClocksFreq+0x154>)
 8000c78:	fb02 f203 	mul.w	r2, r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]
      break;
 8000c80:	e00a      	b.n	8000c98 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4a30      	ldr	r2, [pc, #192]	; (8000d48 <RCC_GetClocksFreq+0x150>)
 8000c86:	fb02 f203 	mul.w	r2, r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	601a      	str	r2, [r3, #0]
      break;
 8000c8e:	e003      	b.n	8000c98 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a2d      	ldr	r2, [pc, #180]	; (8000d48 <RCC_GetClocksFreq+0x150>)
 8000c94:	601a      	str	r2, [r3, #0]
      break;
 8000c96:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <RCC_GetClocksFreq+0x14c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000ca8:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <RCC_GetClocksFreq+0x158>)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	40da      	lsrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <RCC_GetClocksFreq+0x14c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cc8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000cd0:	4a1f      	ldr	r2, [pc, #124]	; (8000d50 <RCC_GetClocksFreq+0x158>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	40da      	lsrs	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <RCC_GetClocksFreq+0x14c>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000cf0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	0adb      	lsrs	r3, r3, #11
 8000cf6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000cf8:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <RCC_GetClocksFreq+0x158>)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	40da      	lsrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <RCC_GetClocksFreq+0x14c>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d18:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	0b9b      	lsrs	r3, r3, #14
 8000d1e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <RCC_GetClocksFreq+0x15c>)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	611a      	str	r2, [r3, #16]
}
 8000d3a:	bf00      	nop
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000
 8000d48:	007a1200 	.word	0x007a1200
 8000d4c:	003d0900 	.word	0x003d0900
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000010 	.word	0x20000010

08000d58 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000d6a:	4909      	ldr	r1, [pc, #36]	; (8000d90 <RCC_APB2PeriphClockCmd+0x38>)
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <RCC_APB2PeriphClockCmd+0x38>)
 8000d6e:	699a      	ldr	r2, [r3, #24]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000d76:	e006      	b.n	8000d86 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000d78:	4905      	ldr	r1, [pc, #20]	; (8000d90 <RCC_APB2PeriphClockCmd+0x38>)
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <RCC_APB2PeriphClockCmd+0x38>)
 8000d7c:	699a      	ldr	r2, [r3, #24]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4013      	ands	r3, r2
 8000d84:	618b      	str	r3, [r1, #24]
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000

08000d94 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000da6:	4909      	ldr	r1, [pc, #36]	; (8000dcc <RCC_APB1PeriphClockCmd+0x38>)
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <RCC_APB1PeriphClockCmd+0x38>)
 8000daa:	69da      	ldr	r2, [r3, #28]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000db2:	e006      	b.n	8000dc2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000db4:	4905      	ldr	r1, [pc, #20]	; (8000dcc <RCC_APB1PeriphClockCmd+0x38>)
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <RCC_APB1PeriphClockCmd+0x38>)
 8000db8:	69da      	ldr	r2, [r3, #28]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61cb      	str	r3, [r1, #28]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	8a1b      	ldrh	r3, [r3, #16]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dfc:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000e00:	4013      	ands	r3, r2
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	88db      	ldrh	r3, [r3, #6]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	899b      	ldrh	r3, [r3, #12]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e22:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000e26:	4013      	ands	r3, r2
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	889a      	ldrh	r2, [r3, #4]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	891b      	ldrh	r3, [r3, #8]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e42:	4313      	orrs	r3, r2
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	8a9b      	ldrh	r3, [r3, #20]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e58:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	899b      	ldrh	r3, [r3, #12]
 8000e64:	461a      	mov	r2, r3
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff febd 	bl	8000bf8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <USART_Init+0x16c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d102      	bne.n	8000e8c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e8a:	e001      	b.n	8000e90 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	899b      	ldrh	r3, [r3, #12]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	da0c      	bge.n	8000eb6 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009a      	lsls	r2, r3, #2
 8000ea6:	441a      	add	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb4:	e00b      	b.n	8000ece <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009a      	lsls	r2, r3, #2
 8000ec0:	441a      	add	r2, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <USART_Init+0x170>)
 8000ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	2264      	movs	r2, #100	; 0x64
 8000ee2:	fb02 f303 	mul.w	r3, r2, r3
 8000ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	899b      	ldrh	r3, [r3, #12]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da0c      	bge.n	8000f12 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000ef8:	6a3b      	ldr	r3, [r7, #32]
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	3332      	adds	r3, #50	; 0x32
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <USART_Init+0x170>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	095b      	lsrs	r3, r3, #5
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f10:	e00b      	b.n	8000f2a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	3332      	adds	r3, #50	; 0x32
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <USART_Init+0x170>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f26:	4313      	orrs	r3, r2
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	811a      	strh	r2, [r3, #8]
}
 8000f32:	bf00      	nop
 8000f34:	3730      	adds	r7, #48	; 0x30
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	51eb851f 	.word	0x51eb851f

08000f44 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d008      	beq.n	8000f68 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	899b      	ldrh	r3, [r3, #12]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000f66:	e007      	b.n	8000f78 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	899b      	ldrh	r3, [r3, #12]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	819a      	strh	r2, [r3, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b087      	sub	sp, #28
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	807b      	strh	r3, [r7, #2]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	f003 031f 	and.w	r3, r3, #31
 8000fb6:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d103      	bne.n	8000fd0 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	330c      	adds	r3, #12
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e009      	b.n	8000fe4 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d103      	bne.n	8000fde <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3310      	adds	r3, #16
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e002      	b.n	8000fe4 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3314      	adds	r3, #20
 8000fe2:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d006      	beq.n	8000ff8 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	6811      	ldr	r1, [r2, #0]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ff6:	e006      	b.n	8001006 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	43d2      	mvns	r2, r2
 8001002:	400a      	ands	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001022:	b29a      	uxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	809a      	strh	r2, [r3, #4]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	b29b      	uxth	r3, r3
 8001040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001044:	b29b      	uxth	r3, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	b29a      	uxth	r2, r3
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	4013      	ands	r3, r2
 800106a:	b29b      	uxth	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e001      	b.n	800107a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <adc_ready>:
 */


#include <adc.h>

uint8_t adc_ready(ADC_TypeDef *_adc) {
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
	if (_adc->SR & ADC_SR_EOC) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <adc_ready+0x18>
		return 1;
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <adc_ready+0x1a>
	}
	return 0;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <adc_start>:
void adc_stop(ADC_TypeDef *_adc, uint8_t _ch) {
	_adc->SQR3 &= ~(_ch << 0);
	_adc->CR2 &= ~(_ch << 30);
}

void adc_start(ADC_TypeDef *_adc) {
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	_adc->CR2 |= ADC_CR2_SWSTART;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	609a      	str	r2, [r3, #8]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <adc_set_channel>:

void adc_set_channel(ADC_TypeDef *_adc, uint8_t _ch) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	_adc->SQR3 = (_ch << 0);
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <adc_value>:

uint16_t adc_value(ADC_TypeDef *_adc) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	return _adc->DR & 0xFFF;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f6:	b29b      	uxth	r3, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <adc_init>:

void adc_init(ADC_TypeDef *_adc) {
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	_adc->CR2 |= ADC_CR2_ADON;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]
	_adc->CR2 |= ADC_CR2_EXTTRIG;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]
	_adc->CR2 |= ADC_CR2_EXTSEL;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f443 2260 	orr.w	r2, r3, #917504	; 0xe0000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	609a      	str	r2, [r3, #8]

	_adc->CR2 |= ADC_CR2_RSTCAL;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f043 0208 	orr.w	r2, r3, #8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	609a      	str	r2, [r3, #8]
	_adc->CR1 |= ADC_CR1_EOCIE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f043 0220 	orr.w	r2, r3, #32
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	605a      	str	r2, [r3, #4]


	while (_adc->CR2 & (1 << 3));
 8001146:	bf00      	nop
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f9      	bne.n	8001148 <adc_init+0x46>
	_adc->CR2 |= ADC_CR2_CAL;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f043 0204 	orr.w	r2, r3, #4
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
	while (_adc->CR2 & (1 << 2)); /* Wait for calibration to finish   */
 8001160:	bf00      	nop
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <adc_init+0x60>

}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <adc_add_channel>:

static uint8_t _adc_mng_channels_[16];
static uint8_t _adc_mng_channel_cntr_ = 0;
static uint16_t _adc_values_[16];

uint8_t adc_add_channel(uint8_t _channel) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	_adc_mng_channels_[_adc_mng_channel_cntr_++] = _channel;
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <adc_add_channel+0x30>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	b2d1      	uxtb	r1, r2
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <adc_add_channel+0x30>)
 800118c:	7011      	strb	r1, [r2, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	4a06      	ldr	r2, [pc, #24]	; (80011ac <adc_add_channel+0x34>)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	5453      	strb	r3, [r2, r1]
	return (_adc_mng_channel_cntr_ - 1);
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <adc_add_channel+0x30>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	b2db      	uxtb	r3, r3
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000084 	.word	0x20000084
 80011ac:	20000074 	.word	0x20000074

080011b0 <adc_mng_init>:

void adc_mng_init() {
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	_adc_mng_channel_cntr_ = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <adc_mng_init+0x14>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000084 	.word	0x20000084

080011c8 <adc_mng_value>:

uint16_t adc_mng_value(uint8_t _channel) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	return _adc_values_[_channel];
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <adc_mng_value+0x1c>)
 80011d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000088 	.word	0x20000088

080011e8 <task_adc_mng>:


void task_adc_mng() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
	static uint8_t st = 0;
	static uint32_t values[16];
	static uint8_t smp_cntr = 0;
	static uint8_t ch_cntr = 0;

	if (_adc_mng_channel_cntr_ == 0) {
 80011ee:	4b52      	ldr	r3, [pc, #328]	; (8001338 <task_adc_mng+0x150>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 809c 	beq.w	8001330 <task_adc_mng+0x148>
		return;
	}

	if (st == 0) {
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <task_adc_mng+0x154>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d12c      	bne.n	800125a <task_adc_mng+0x72>

		for (ch_cntr = 0; ch_cntr < _adc_mng_channel_cntr_; ch_cntr++) {
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <task_adc_mng+0x158>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e00c      	b.n	8001222 <task_adc_mng+0x3a>
			values[ch_cntr] = 0;
 8001208:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <task_adc_mng+0x158>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <task_adc_mng+0x15c>)
 8001210:	2200      	movs	r2, #0
 8001212:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		for (ch_cntr = 0; ch_cntr < _adc_mng_channel_cntr_; ch_cntr++) {
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <task_adc_mng+0x158>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b48      	ldr	r3, [pc, #288]	; (8001340 <task_adc_mng+0x158>)
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <task_adc_mng+0x158>)
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	4b44      	ldr	r3, [pc, #272]	; (8001338 <task_adc_mng+0x150>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3ec      	bcc.n	8001208 <task_adc_mng+0x20>
		}
		ch_cntr = 0;
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <task_adc_mng+0x158>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
		smp_cntr = 0;
 8001234:	4b44      	ldr	r3, [pc, #272]	; (8001348 <task_adc_mng+0x160>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]

		adc_set_channel(ADC1, _adc_mng_channels_[ch_cntr]);
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <task_adc_mng+0x158>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b42      	ldr	r3, [pc, #264]	; (800134c <task_adc_mng+0x164>)
 8001242:	5c9b      	ldrb	r3, [r3, r2]
 8001244:	4619      	mov	r1, r3
 8001246:	4842      	ldr	r0, [pc, #264]	; (8001350 <task_adc_mng+0x168>)
 8001248:	f7ff ff3e 	bl	80010c8 <adc_set_channel>
		adc_start(ADC1);
 800124c:	4840      	ldr	r0, [pc, #256]	; (8001350 <task_adc_mng+0x168>)
 800124e:	f7ff ff2c 	bl	80010aa <adc_start>
		st = 1;
 8001252:	4b3a      	ldr	r3, [pc, #232]	; (800133c <task_adc_mng+0x154>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	e06b      	b.n	8001332 <task_adc_mng+0x14a>
	} else if (st == 1) {
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <task_adc_mng+0x154>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d167      	bne.n	8001332 <task_adc_mng+0x14a>

		if (adc_ready(ADC1)) {
 8001262:	483b      	ldr	r0, [pc, #236]	; (8001350 <task_adc_mng+0x168>)
 8001264:	f7ff ff0f 	bl	8001086 <adc_ready>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d061      	beq.n	8001332 <task_adc_mng+0x14a>
			values[ch_cntr] += adc_value(ADC1);
 800126e:	4838      	ldr	r0, [pc, #224]	; (8001350 <task_adc_mng+0x168>)
 8001270:	f7ff ff38 	bl	80010e4 <adc_value>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <task_adc_mng+0x158>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <task_adc_mng+0x158>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <task_adc_mng+0x15c>)
 8001286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128a:	4602      	mov	r2, r0
 800128c:	4413      	add	r3, r2
 800128e:	4a2d      	ldr	r2, [pc, #180]	; (8001344 <task_adc_mng+0x15c>)
 8001290:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			ch_cntr++;
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <task_adc_mng+0x158>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <task_adc_mng+0x158>)
 800129e:	701a      	strb	r2, [r3, #0]
			if (ch_cntr >= _adc_mng_channel_cntr_) {
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <task_adc_mng+0x158>)
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <task_adc_mng+0x150>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d334      	bcc.n	8001316 <task_adc_mng+0x12e>
				ch_cntr = 0;
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <task_adc_mng+0x158>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
				smp_cntr++;
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <task_adc_mng+0x160>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <task_adc_mng+0x160>)
 80012bc:	701a      	strb	r2, [r3, #0]

				if (smp_cntr >= 50) {
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <task_adc_mng+0x160>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b31      	cmp	r3, #49	; 0x31
 80012c4:	d927      	bls.n	8001316 <task_adc_mng+0x12e>
					for (uint8_t s = 0; s < _adc_mng_channel_cntr_; s++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	e01c      	b.n	8001306 <task_adc_mng+0x11e>
						values[s] /= 50;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	491c      	ldr	r1, [pc, #112]	; (8001344 <task_adc_mng+0x15c>)
 80012d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012d6:	491f      	ldr	r1, [pc, #124]	; (8001354 <task_adc_mng+0x16c>)
 80012d8:	fba1 1202 	umull	r1, r2, r1, r2
 80012dc:	0912      	lsrs	r2, r2, #4
 80012de:	4919      	ldr	r1, [pc, #100]	; (8001344 <task_adc_mng+0x15c>)
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						_adc_values_[s] = values[s];
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	4916      	ldr	r1, [pc, #88]	; (8001344 <task_adc_mng+0x15c>)
 80012ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012ee:	b291      	uxth	r1, r2
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <task_adc_mng+0x170>)
 80012f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						values[s] = 0;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <task_adc_mng+0x15c>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for (uint8_t s = 0; s < _adc_mng_channel_cntr_; s++) {
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	3301      	adds	r3, #1
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <task_adc_mng+0x150>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	429a      	cmp	r2, r3
 800130e:	d3dd      	bcc.n	80012cc <task_adc_mng+0xe4>
					}
					smp_cntr = 0;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <task_adc_mng+0x160>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
				}
			}
			adc_set_channel(ADC1, _adc_mng_channels_[ch_cntr]);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <task_adc_mng+0x158>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <task_adc_mng+0x164>)
 800131e:	5c9b      	ldrb	r3, [r3, r2]
 8001320:	4619      	mov	r1, r3
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <task_adc_mng+0x168>)
 8001324:	f7ff fed0 	bl	80010c8 <adc_set_channel>
			adc_start(ADC1);
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <task_adc_mng+0x168>)
 800132a:	f7ff febe 	bl	80010aa <adc_start>
 800132e:	e000      	b.n	8001332 <task_adc_mng+0x14a>
		return;
 8001330:	bf00      	nop
		}
	}
}
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000084 	.word	0x20000084
 800133c:	200000a8 	.word	0x200000a8
 8001340:	200000a9 	.word	0x200000a9
 8001344:	200000ac 	.word	0x200000ac
 8001348:	200000ec 	.word	0x200000ec
 800134c:	20000074 	.word	0x20000074
 8001350:	40012400 	.word	0x40012400
 8001354:	51eb851f 	.word	0x51eb851f
 8001358:	20000088 	.word	0x20000088

0800135c <SysTick_Handler>:
#include <delay.h>

uint64_t _systick_ = 0;

void SysTick_Handler(void)
{
 800135c:	b490      	push	{r4, r7}
 800135e:	af00      	add	r7, sp, #0
	_systick_++;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Handler+0x1c>)
 8001362:	cb18      	ldmia	r3, {r3, r4}
 8001364:	3301      	adds	r3, #1
 8001366:	f144 0400 	adc.w	r4, r4, #0
 800136a:	4a03      	ldr	r2, [pc, #12]	; (8001378 <SysTick_Handler+0x1c>)
 800136c:	e882 0018 	stmia.w	r2, {r3, r4}
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc90      	pop	{r4, r7}
 8001376:	4770      	bx	lr
 8001378:	200000f0 	.word	0x200000f0

0800137c <system_clock>:

uint64_t system_clock(){
 800137c:	b490      	push	{r4, r7}
 800137e:	af00      	add	r7, sp, #0
	return _systick_;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <system_clock+0x14>)
 8001382:	cb18      	ldmia	r3, {r3, r4}
}
 8001384:	4618      	mov	r0, r3
 8001386:	4621      	mov	r1, r4
 8001388:	46bd      	mov	sp, r7
 800138a:	bc90      	pop	{r4, r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200000f0 	.word	0x200000f0

08001394 <delay_ms>:

uint8_t delay_ms(uint64_t _ts, uint32_t _ms) {
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
	if ((get_timestamp() - _ts) >= _ms) {
 80013a0:	f000 f82a 	bl	80013f8 <get_timestamp>
 80013a4:	460a      	mov	r2, r1
 80013a6:	4601      	mov	r1, r0
 80013a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013ac:	1ac9      	subs	r1, r1, r3
 80013ae:	eb62 0204 	sbc.w	r2, r2, r4
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f04f 0400 	mov.w	r4, #0
 80013b8:	42a2      	cmp	r2, r4
 80013ba:	bf08      	it	eq
 80013bc:	4299      	cmpeq	r1, r3
 80013be:	d301      	bcc.n	80013c4 <delay_ms+0x30>
		return 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <delay_ms+0x32>
	}
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}

080013ce <delay_s>:
uint8_t delay_s(uint64_t _ts, uint32_t _s) {
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
	return delay_ms(_ts, _s * 1000);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ea:	f7ff ffd3 	bl	8001394 <delay_ms>
 80013ee:	4603      	mov	r3, r0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <get_timestamp>:
uint64_t get_timestamp() {
 80013f8:	b490      	push	{r4, r7}
 80013fa:	af00      	add	r7, sp, #0
	return _systick_;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <get_timestamp+0x14>)
 80013fe:	cb18      	ldmia	r3, {r3, r4}
}
 8001400:	4618      	mov	r0, r3
 8001402:	4621      	mov	r1, r4
 8001404:	46bd      	mov	sp, r7
 8001406:	bc90      	pop	{r4, r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200000f0 	.word	0x200000f0

08001410 <fifo_req>:
	return _fifo_task_title_[_fifo_id];
}
uint8_t fifo_aval() {
	return FifoCntr;
}
uint8_t fifo_req(uint8_t *_ptr, uint16_t _size, uint16_t _max_elem_aval, const char *_f_title_) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af02      	add	r7, sp, #8
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	817b      	strh	r3, [r7, #10]
 800141e:	4613      	mov	r3, r2
 8001420:	813b      	strh	r3, [r7, #8]
	if (FifoCntr >= FIFO_MAX_AVAL) {
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <fifo_req+0xb8>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b22      	cmp	r3, #34	; 0x22
 8001428:	d901      	bls.n	800142e <fifo_req+0x1e>
		return 0xFF;
 800142a:	23ff      	movs	r3, #255	; 0xff
 800142c:	e047      	b.n	80014be <fifo_req+0xae>
	}
	_fifo_task_title_[FifoCntr] = (char *)_f_title_;
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <fifo_req+0xb8>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	4a25      	ldr	r2, [pc, #148]	; (80014cc <fifo_req+0xbc>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	printf("fifo > max[%02d] with size[%02d]. id: [%s]%02d\r\n", _max_elem_aval, _size, _f_title_, FifoCntr);
 800143c:	8939      	ldrh	r1, [r7, #8]
 800143e:	897a      	ldrh	r2, [r7, #10]
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <fifo_req+0xb8>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4821      	ldr	r0, [pc, #132]	; (80014d0 <fifo_req+0xc0>)
 800144a:	f001 ff5d 	bl	8003308 <iprintf>
	Fifo[FifoCntr].front = 0;
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <fifo_req+0xb8>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4a20      	ldr	r2, [pc, #128]	; (80014d4 <fifo_req+0xc4>)
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	4413      	add	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	2200      	movs	r2, #0
 800145e:	705a      	strb	r2, [r3, #1]
 8001460:	2200      	movs	r2, #0
 8001462:	709a      	strb	r2, [r3, #2]
 8001464:	2200      	movs	r2, #0
 8001466:	70da      	strb	r2, [r3, #3]
	Fifo[FifoCntr].rear = 0;
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <fifo_req+0xb8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <fifo_req+0xc4>)
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4413      	add	r3, r2
 8001472:	2200      	movs	r2, #0
 8001474:	711a      	strb	r2, [r3, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	715a      	strb	r2, [r3, #5]
 800147a:	2200      	movs	r2, #0
 800147c:	719a      	strb	r2, [r3, #6]
 800147e:	2200      	movs	r2, #0
 8001480:	71da      	strb	r2, [r3, #7]
	Fifo[FifoCntr].ptr = _ptr;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <fifo_req+0xb8>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <fifo_req+0xc4>)
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4413      	add	r3, r2
 800148c:	3308      	adds	r3, #8
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	601a      	str	r2, [r3, #0]
	Fifo[FifoCntr].size = _size;
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <fifo_req+0xb8>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <fifo_req+0xc4>)
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	3308      	adds	r3, #8
 800149e:	897a      	ldrh	r2, [r7, #10]
 80014a0:	809a      	strh	r2, [r3, #4]
	Fifo[FifoCntr].max_elem_aval = _max_elem_aval;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <fifo_req+0xb8>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <fifo_req+0xc4>)
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	3308      	adds	r3, #8
 80014ae:	893a      	ldrh	r2, [r7, #8]
 80014b0:	80da      	strh	r2, [r3, #6]

	return FifoCntr++;
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <fifo_req+0xb8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	b2d1      	uxtb	r1, r2
 80014ba:	4a03      	ldr	r2, [pc, #12]	; (80014c8 <fifo_req+0xb8>)
 80014bc:	7011      	strb	r1, [r2, #0]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000f8 	.word	0x200000f8
 80014cc:	200001a4 	.word	0x200001a4
 80014d0:	0800347c 	.word	0x0800347c
 80014d4:	20000230 	.word	0x20000230

080014d8 <fifo_push>:
}
uint16_t fifo_get_front(uint8_t _fifo_id) {
	return Fifo[_fifo_id].front;
}

uint8_t fifo_push(uint8_t _fifo_id, uint8_t *_data) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
	if (fifo_full(_fifo_id)) {
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f844 	bl	8001574 <fifo_full>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <fifo_push+0x1e>
		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e037      	b.n	8001566 <fifo_push+0x8e>
	}
	Fifo[_fifo_id].rear = (Fifo[_fifo_id].rear + 1) % Fifo[_fifo_id].max_elem_aval;
 80014f6:	79f9      	ldrb	r1, [r7, #7]
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <fifo_push+0x98>)
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	3301      	adds	r3, #1
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	481a      	ldr	r0, [pc, #104]	; (8001570 <fifo_push+0x98>)
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	4402      	add	r2, r0
 800150c:	3208      	adds	r2, #8
 800150e:	88d2      	ldrh	r2, [r2, #6]
 8001510:	b292      	uxth	r2, r2
 8001512:	fb93 f0f2 	sdiv	r0, r3, r2
 8001516:	fb02 f200 	mul.w	r2, r2, r0
 800151a:	1a9a      	subs	r2, r3, r2
 800151c:	4814      	ldr	r0, [pc, #80]	; (8001570 <fifo_push+0x98>)
 800151e:	010b      	lsls	r3, r1, #4
 8001520:	4403      	add	r3, r0
 8001522:	605a      	str	r2, [r3, #4]
	memcpy(Fifo[_fifo_id].ptr + (Fifo[_fifo_id].rear * Fifo[_fifo_id].size), _data, Fifo[_fifo_id].size);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <fifo_push+0x98>)
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	4413      	add	r3, r2
 800152c:	3308      	adds	r3, #8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	490f      	ldr	r1, [pc, #60]	; (8001570 <fifo_push+0x98>)
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	440a      	add	r2, r1
 8001538:	6852      	ldr	r2, [r2, #4]
 800153a:	79f9      	ldrb	r1, [r7, #7]
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <fifo_push+0x98>)
 800153e:	0109      	lsls	r1, r1, #4
 8001540:	4401      	add	r1, r0
 8001542:	3108      	adds	r1, #8
 8001544:	8889      	ldrh	r1, [r1, #4]
 8001546:	b289      	uxth	r1, r1
 8001548:	fb01 f202 	mul.w	r2, r1, r2
 800154c:	1898      	adds	r0, r3, r2
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <fifo_push+0x98>)
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	3308      	adds	r3, #8
 8001558:	889b      	ldrh	r3, [r3, #4]
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	6839      	ldr	r1, [r7, #0]
 8001560:	f001 ff6c 	bl	800343c <memcpy>
	return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000230 	.word	0x20000230

08001574 <fifo_full>:
uint8_t fifo_full(uint8_t _fifo_id) {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	if (Fifo[_fifo_id].front == ((Fifo[_fifo_id].rear + 1) % Fifo[_fifo_id].max_elem_aval)) {
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <fifo_full+0x4c>)
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	4413      	add	r3, r2
 8001586:	6819      	ldr	r1, [r3, #0]
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <fifo_full+0x4c>)
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	3301      	adds	r3, #1
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	480a      	ldr	r0, [pc, #40]	; (80015c0 <fifo_full+0x4c>)
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	4402      	add	r2, r0
 800159c:	3208      	adds	r2, #8
 800159e:	88d2      	ldrh	r2, [r2, #6]
 80015a0:	b292      	uxth	r2, r2
 80015a2:	fb93 f0f2 	sdiv	r0, r3, r2
 80015a6:	fb02 f200 	mul.w	r2, r2, r0
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	4299      	cmp	r1, r3
 80015ae:	d101      	bne.n	80015b4 <fifo_full+0x40>
		return 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <fifo_full+0x42>
	}
	return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000230 	.word	0x20000230

080015c4 <fifo_empty>:
uint8_t fifo_empty(uint8_t _fifo_id) {
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	if (Fifo[_fifo_id].front == Fifo[_fifo_id].rear) {
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <fifo_empty+0x34>)
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4907      	ldr	r1, [pc, #28]	; (80015f8 <fifo_empty+0x34>)
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	440b      	add	r3, r1
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d101      	bne.n	80015ea <fifo_empty+0x26>
		return 1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <fifo_empty+0x28>
	}
	return 0;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000230 	.word	0x20000230

080015fc <fifo_pop>:
uint8_t *fifo_pop(uint8_t _fifo_id) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	if (fifo_empty(_fifo_id)) {
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ffdb 	bl	80015c4 <fifo_empty>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <fifo_pop+0x1c>
		return 0;
 8001614:	2300      	movs	r3, #0
 8001616:	e02b      	b.n	8001670 <fifo_pop+0x74>
	}
	Fifo[_fifo_id].front = (Fifo[_fifo_id].front + 1) % Fifo[_fifo_id].max_elem_aval;
 8001618:	79f9      	ldrb	r1, [r7, #7]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4a16      	ldr	r2, [pc, #88]	; (8001678 <fifo_pop+0x7c>)
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <fifo_pop+0x7c>)
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	4402      	add	r2, r0
 800162e:	3208      	adds	r2, #8
 8001630:	88d2      	ldrh	r2, [r2, #6]
 8001632:	b292      	uxth	r2, r2
 8001634:	fb93 f0f2 	sdiv	r0, r3, r2
 8001638:	fb02 f200 	mul.w	r2, r2, r0
 800163c:	1a9a      	subs	r2, r3, r2
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <fifo_pop+0x7c>)
 8001640:	010b      	lsls	r3, r1, #4
 8001642:	4403      	add	r3, r0
 8001644:	601a      	str	r2, [r3, #0]
	return (Fifo[_fifo_id].ptr + (Fifo[_fifo_id].front * Fifo[_fifo_id].size));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <fifo_pop+0x7c>)
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4413      	add	r3, r2
 800164e:	3308      	adds	r3, #8
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	79fa      	ldrb	r2, [r7, #7]
 8001654:	4908      	ldr	r1, [pc, #32]	; (8001678 <fifo_pop+0x7c>)
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	440a      	add	r2, r1
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	79f9      	ldrb	r1, [r7, #7]
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <fifo_pop+0x7c>)
 8001660:	0109      	lsls	r1, r1, #4
 8001662:	4401      	add	r1, r0
 8001664:	3108      	adds	r1, #8
 8001666:	8889      	ldrh	r1, [r1, #4]
 8001668:	b289      	uxth	r1, r1
 800166a:	fb01 f202 	mul.w	r2, r1, r2
 800166e:	4413      	add	r3, r2
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000230 	.word	0x20000230

0800167c <fifo_pop_stay>:

uint8_t *fifo_pop_stay(uint8_t _fifo_id) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	if (fifo_empty(_fifo_id)) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff9b 	bl	80015c4 <fifo_empty>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <fifo_pop_stay+0x1c>
		return 0;
 8001694:	2300      	movs	r3, #0
 8001696:	e025      	b.n	80016e4 <fifo_pop_stay+0x68>
	}
	uint16_t front = Fifo[_fifo_id].front;
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <fifo_pop_stay+0x70>)
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	81fb      	strh	r3, [r7, #14]
	front = (front + 1) % Fifo[_fifo_id].max_elem_aval;
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	3301      	adds	r3, #1
 80016a8:	79fa      	ldrb	r2, [r7, #7]
 80016aa:	4910      	ldr	r1, [pc, #64]	; (80016ec <fifo_pop_stay+0x70>)
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	440a      	add	r2, r1
 80016b0:	3208      	adds	r2, #8
 80016b2:	88d2      	ldrh	r2, [r2, #6]
 80016b4:	b292      	uxth	r2, r2
 80016b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80016ba:	fb02 f201 	mul.w	r2, r2, r1
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	81fb      	strh	r3, [r7, #14]
	return (Fifo[_fifo_id].ptr + (front * Fifo[_fifo_id].size));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4a09      	ldr	r2, [pc, #36]	; (80016ec <fifo_pop_stay+0x70>)
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	3308      	adds	r3, #8
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	89fa      	ldrh	r2, [r7, #14]
 80016d0:	79f9      	ldrb	r1, [r7, #7]
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <fifo_pop_stay+0x70>)
 80016d4:	0109      	lsls	r1, r1, #4
 80016d6:	4401      	add	r1, r0
 80016d8:	3108      	adds	r1, #8
 80016da:	8889      	ldrh	r1, [r1, #4]
 80016dc:	b289      	uxth	r1, r1
 80016de:	fb01 f202 	mul.w	r2, r1, r2
 80016e2:	4413      	add	r3, r2
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000230 	.word	0x20000230

080016f0 <fifo_clear>:
	} else {
		return (Fifo[_fifo_id].rear - Fifo[_fifo_id].front);
	}
}

void fifo_clear(uint8_t _fifo_id) {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	Fifo[_fifo_id].front = Fifo[_fifo_id].rear = 0;
 80016fa:	79f9      	ldrb	r1, [r7, #7]
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	480c      	ldr	r0, [pc, #48]	; (8001730 <fifo_clear+0x40>)
 8001700:	0113      	lsls	r3, r2, #4
 8001702:	4403      	add	r3, r0
 8001704:	2000      	movs	r0, #0
 8001706:	7118      	strb	r0, [r3, #4]
 8001708:	2000      	movs	r0, #0
 800170a:	7158      	strb	r0, [r3, #5]
 800170c:	2000      	movs	r0, #0
 800170e:	7198      	strb	r0, [r3, #6]
 8001710:	2000      	movs	r0, #0
 8001712:	71d8      	strb	r0, [r3, #7]
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <fifo_clear+0x40>)
 8001716:	0113      	lsls	r3, r2, #4
 8001718:	4403      	add	r3, r0
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <fifo_clear+0x40>)
 800171e:	010b      	lsls	r3, r1, #4
 8001720:	4403      	add	r3, r0
 8001722:	601a      	str	r2, [r3, #0]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000230 	.word	0x20000230

08001734 <main>:
#include <delay.h>
#include <pir_tester_task.h>
#include <fifo.h>


int main(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

	system_init();
 8001738:	f001 faa4 	bl	8002c84 <system_init>
	task_init();
 800173c:	f000 ffd2 	bl	80026e4 <task_init>

	while (1) {
		task_adc_mng();
 8001740:	f7ff fd52 	bl	80011e8 <task_adc_mng>
		task_dbg_mng();
 8001744:	f000 fb9a 	bl	8001e7c <task_dbg_mng>
		task_test();
 8001748:	f000 fc8a 	bl	8002060 <task_test>
		tester_task();
 800174c:	f000 fa04 	bl	8001b58 <tester_task>
		task_adc_mng();
 8001750:	e7f6      	b.n	8001740 <main+0xc>
	...

08001754 <USART3_IRQHandler>:
};



void USART3_IRQHandler(void)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
//	uint16_t data = USART_ReceiveData(USART1);
//	printf("%d\r\n",data);
//	USART_SendData(USART1,data);
//	while (!USART_GetFlagStatus(USART1, USART_FLAG_TXE));
	uint16_t data = USART_ReceiveData(USART3);
 800175a:	4814      	ldr	r0, [pc, #80]	; (80017ac <USART3_IRQHandler+0x58>)
 800175c:	f7ff fc69 	bl	8001032 <USART_ReceiveData>
 8001760:	4603      	mov	r3, r0
 8001762:	80fb      	strh	r3, [r7, #6]
	if (delay_ms(RXBufTs,100))
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <USART3_IRQHandler+0x5c>)
 8001766:	cb18      	ldmia	r3, {r3, r4}
 8001768:	2264      	movs	r2, #100	; 0x64
 800176a:	4618      	mov	r0, r3
 800176c:	4621      	mov	r1, r4
 800176e:	f7ff fe11 	bl	8001394 <delay_ms>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <USART3_IRQHandler+0x2a>
	{
		RXBufCntr = 0;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <USART3_IRQHandler+0x60>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
	}
	RXBuffer[RXBufCntr++] = data;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <USART3_IRQHandler+0x60>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	b2d1      	uxtb	r1, r2
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <USART3_IRQHandler+0x60>)
 8001788:	7011      	strb	r1, [r2, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	b2d9      	uxtb	r1, r3
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <USART3_IRQHandler+0x64>)
 8001792:	5499      	strb	r1, [r3, r2]
	RXBufTs = system_clock();
 8001794:	f7ff fdf2 	bl	800137c <system_clock>
 8001798:	4603      	mov	r3, r0
 800179a:	460c      	mov	r4, r1
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <USART3_IRQHandler+0x5c>)
 800179e:	e882 0018 	stmia.w	r2, {r3, r4}
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40004800 	.word	0x40004800
 80017b0:	20000140 	.word	0x20000140
 80017b4:	20000138 	.word	0x20000138
 80017b8:	20000124 	.word	0x20000124

080017bc <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
	char c = USART1->DR;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <USART1_IRQHandler+0x8c>)
 80017c4:	889b      	ldrh	r3, [r3, #4]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	71fb      	strb	r3, [r7, #7]
//	USART_SendData(USART3, c);
//	while (!USART_GetFlagStatus(USART3, USART_FLAG_TXE));
	if (delay_ms(RXUSART3Ts,100))
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <USART1_IRQHandler+0x90>)
 80017cc:	cb18      	ldmia	r3, {r3, r4}
 80017ce:	2264      	movs	r2, #100	; 0x64
 80017d0:	4618      	mov	r0, r3
 80017d2:	4621      	mov	r1, r4
 80017d4:	f7ff fdde 	bl	8001394 <delay_ms>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <USART1_IRQHandler+0x28>
		DBGBUF_CNTR = 0;
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <USART1_IRQHandler+0x94>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
	if (c == '\n' || c == '\r') {
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b0a      	cmp	r3, #10
 80017e8:	d002      	beq.n	80017f0 <USART1_IRQHandler+0x34>
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b0d      	cmp	r3, #13
 80017ee:	d106      	bne.n	80017fe <USART1_IRQHandler+0x42>
		DBGBUF_RDY = true;
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <USART1_IRQHandler+0x98>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
		DBGBUF_CNTR = 0;
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <USART1_IRQHandler+0x94>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e00f      	b.n	800181e <USART1_IRQHandler+0x62>
	} else {
		DBGBUF[DBGBUF_CNTR++] = c;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <USART1_IRQHandler+0x94>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	b2d1      	uxtb	r1, r2
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <USART1_IRQHandler+0x94>)
 8001808:	7011      	strb	r1, [r2, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <USART1_IRQHandler+0x9c>)
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	5453      	strb	r3, [r2, r1]
		DBGBUF[DBGBUF_CNTR] = '\0';
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <USART1_IRQHandler+0x94>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <USART1_IRQHandler+0x9c>)
 800181a:	2100      	movs	r1, #0
 800181c:	5499      	strb	r1, [r3, r2]
	}
	if (DBGBUF_CNTR >= 99) {
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <USART1_IRQHandler+0x94>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b62      	cmp	r3, #98	; 0x62
 8001824:	d902      	bls.n	800182c <USART1_IRQHandler+0x70>
		DBGBUF_CNTR = 0;
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <USART1_IRQHandler+0x94>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
	}
	RXUSART3Ts = system_clock();
 800182c:	f7ff fda6 	bl	800137c <system_clock>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	4a05      	ldr	r2, [pc, #20]	; (800184c <USART1_IRQHandler+0x90>)
 8001836:	e882 0018 	stmia.w	r2, {r3, r4}
	USART1->SR;
 800183a:	4b03      	ldr	r3, [pc, #12]	; (8001848 <USART1_IRQHandler+0x8c>)
 800183c:	881b      	ldrh	r3, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	40013800 	.word	0x40013800
 800184c:	20000148 	.word	0x20000148
 8001850:	20000153 	.word	0x20000153
 8001854:	20000154 	.word	0x20000154
 8001858:	20000474 	.word	0x20000474

0800185c <requested_start>:

bool_enu requested_start() {
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
	if (req_start) {
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <requested_start+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <requested_start+0x16>
		req_start = false;
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <requested_start+0x20>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
		return true;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <requested_start+0x18>
	}
	return false;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	20000155 	.word	0x20000155

08001880 <requested_stop>:

bool_enu requested_stop() {
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	if (req_stop) {
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <requested_stop+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <requested_stop+0x16>
		req_stop = false;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <requested_stop+0x20>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
		return true;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <requested_stop+0x18>
	}
	return false;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000156 	.word	0x20000156

080018a4 <uart_transmit>:


void uart_transmit(uint16_t *_buf, uint16_t _len) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < _len; i++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e013      	b.n	80018de <uart_transmit+0x3a>
		USART_SendData(USART3,_buf[i]);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	480b      	ldr	r0, [pc, #44]	; (80018f0 <uart_transmit+0x4c>)
 80018c4:	f7ff fba4 	bl	8001010 <USART_SendData>
		while (!USART_GetFlagStatus(USART3, USART_FLAG_TXE));
 80018c8:	bf00      	nop
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <uart_transmit+0x4c>)
 80018ce:	f7ff fbbf 	bl	8001050 <USART_GetFlagStatus>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f8      	beq.n	80018ca <uart_transmit+0x26>
	for (int i = 0; i < _len; i++) {
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dce7      	bgt.n	80018b6 <uart_transmit+0x12>
	}
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40004800 	.word	0x40004800

080018f4 <board_switch>:

void  board_switch(uint8_t N, bool_enu state) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]

	if(state == ON){
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	2b01      	cmp	r3, #1
 8001908:	f040 80c3 	bne.w	8001a92 <board_switch+0x19e>
		board_st = N;
 800190c:	4a88      	ldr	r2, [pc, #544]	; (8001b30 <board_switch+0x23c>)
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	7013      	strb	r3, [r2, #0]
		if (N == 1) {
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d114      	bne.n	8001942 <board_switch+0x4e>
			BOARD_1(ON);
 8001918:	2201      	movs	r2, #1
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	4885      	ldr	r0, [pc, #532]	; (8001b34 <board_switch+0x240>)
 800191e:	f7ff f954 	bl	8000bca <GPIO_WriteBit>
			MUX_0(OFF);
 8001922:	2200      	movs	r2, #0
 8001924:	2140      	movs	r1, #64	; 0x40
 8001926:	4884      	ldr	r0, [pc, #528]	; (8001b38 <board_switch+0x244>)
 8001928:	f7ff f94f 	bl	8000bca <GPIO_WriteBit>
			MUX_1(OFF);
 800192c:	2200      	movs	r2, #0
 800192e:	2120      	movs	r1, #32
 8001930:	4881      	ldr	r0, [pc, #516]	; (8001b38 <board_switch+0x244>)
 8001932:	f7ff f94a 	bl	8000bca <GPIO_WriteBit>
			MUX_2(OFF); //000
 8001936:	2200      	movs	r2, #0
 8001938:	2104      	movs	r1, #4
 800193a:	4880      	ldr	r0, [pc, #512]	; (8001b3c <board_switch+0x248>)
 800193c:	f7ff f945 	bl	8000bca <GPIO_WriteBit>
			BOARD_7(OFF);
		} else if (N == 8) {
			BOARD_8(OFF);
		}
	}
}
 8001940:	e0f1      	b.n	8001b26 <board_switch+0x232>
		} else if (N == 2) {
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d114      	bne.n	8001972 <board_switch+0x7e>
			BOARD_2(ON);
 8001948:	2201      	movs	r2, #1
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	4879      	ldr	r0, [pc, #484]	; (8001b34 <board_switch+0x240>)
 800194e:	f7ff f93c 	bl	8000bca <GPIO_WriteBit>
			MUX_0(ON);
 8001952:	2201      	movs	r2, #1
 8001954:	2140      	movs	r1, #64	; 0x40
 8001956:	4878      	ldr	r0, [pc, #480]	; (8001b38 <board_switch+0x244>)
 8001958:	f7ff f937 	bl	8000bca <GPIO_WriteBit>
			MUX_1(OFF);
 800195c:	2200      	movs	r2, #0
 800195e:	2120      	movs	r1, #32
 8001960:	4875      	ldr	r0, [pc, #468]	; (8001b38 <board_switch+0x244>)
 8001962:	f7ff f932 	bl	8000bca <GPIO_WriteBit>
			MUX_2(OFF); //001
 8001966:	2200      	movs	r2, #0
 8001968:	2104      	movs	r1, #4
 800196a:	4874      	ldr	r0, [pc, #464]	; (8001b3c <board_switch+0x248>)
 800196c:	f7ff f92d 	bl	8000bca <GPIO_WriteBit>
}
 8001970:	e0d9      	b.n	8001b26 <board_switch+0x232>
		} else if (N == 3) {
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d114      	bne.n	80019a2 <board_switch+0xae>
			BOARD_3(ON);
 8001978:	2201      	movs	r2, #1
 800197a:	2120      	movs	r1, #32
 800197c:	486d      	ldr	r0, [pc, #436]	; (8001b34 <board_switch+0x240>)
 800197e:	f7ff f924 	bl	8000bca <GPIO_WriteBit>
			MUX_0(OFF);
 8001982:	2200      	movs	r2, #0
 8001984:	2140      	movs	r1, #64	; 0x40
 8001986:	486c      	ldr	r0, [pc, #432]	; (8001b38 <board_switch+0x244>)
 8001988:	f7ff f91f 	bl	8000bca <GPIO_WriteBit>
			MUX_1(ON);
 800198c:	2201      	movs	r2, #1
 800198e:	2120      	movs	r1, #32
 8001990:	4869      	ldr	r0, [pc, #420]	; (8001b38 <board_switch+0x244>)
 8001992:	f7ff f91a 	bl	8000bca <GPIO_WriteBit>
			MUX_2(OFF); //010
 8001996:	2200      	movs	r2, #0
 8001998:	2104      	movs	r1, #4
 800199a:	4868      	ldr	r0, [pc, #416]	; (8001b3c <board_switch+0x248>)
 800199c:	f7ff f915 	bl	8000bca <GPIO_WriteBit>
}
 80019a0:	e0c1      	b.n	8001b26 <board_switch+0x232>
		} else if (N == 4) {
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d114      	bne.n	80019d2 <board_switch+0xde>
			BOARD_4(ON);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2110      	movs	r1, #16
 80019ac:	4861      	ldr	r0, [pc, #388]	; (8001b34 <board_switch+0x240>)
 80019ae:	f7ff f90c 	bl	8000bca <GPIO_WriteBit>
			MUX_0(ON);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2140      	movs	r1, #64	; 0x40
 80019b6:	4860      	ldr	r0, [pc, #384]	; (8001b38 <board_switch+0x244>)
 80019b8:	f7ff f907 	bl	8000bca <GPIO_WriteBit>
			MUX_1(ON);
 80019bc:	2201      	movs	r2, #1
 80019be:	2120      	movs	r1, #32
 80019c0:	485d      	ldr	r0, [pc, #372]	; (8001b38 <board_switch+0x244>)
 80019c2:	f7ff f902 	bl	8000bca <GPIO_WriteBit>
			MUX_2(OFF); //011
 80019c6:	2200      	movs	r2, #0
 80019c8:	2104      	movs	r1, #4
 80019ca:	485c      	ldr	r0, [pc, #368]	; (8001b3c <board_switch+0x248>)
 80019cc:	f7ff f8fd 	bl	8000bca <GPIO_WriteBit>
}
 80019d0:	e0a9      	b.n	8001b26 <board_switch+0x232>
		} else if (N == 5){
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d114      	bne.n	8001a02 <board_switch+0x10e>
			BOARD_5(ON);
 80019d8:	2201      	movs	r2, #1
 80019da:	2108      	movs	r1, #8
 80019dc:	4855      	ldr	r0, [pc, #340]	; (8001b34 <board_switch+0x240>)
 80019de:	f7ff f8f4 	bl	8000bca <GPIO_WriteBit>
			MUX_0(OFF);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2140      	movs	r1, #64	; 0x40
 80019e6:	4854      	ldr	r0, [pc, #336]	; (8001b38 <board_switch+0x244>)
 80019e8:	f7ff f8ef 	bl	8000bca <GPIO_WriteBit>
			MUX_1(OFF);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2120      	movs	r1, #32
 80019f0:	4851      	ldr	r0, [pc, #324]	; (8001b38 <board_switch+0x244>)
 80019f2:	f7ff f8ea 	bl	8000bca <GPIO_WriteBit>
			MUX_2(ON); //100
 80019f6:	2201      	movs	r2, #1
 80019f8:	2104      	movs	r1, #4
 80019fa:	4850      	ldr	r0, [pc, #320]	; (8001b3c <board_switch+0x248>)
 80019fc:	f7ff f8e5 	bl	8000bca <GPIO_WriteBit>
}
 8001a00:	e091      	b.n	8001b26 <board_switch+0x232>
		} else if (N == 6) {
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b06      	cmp	r3, #6
 8001a06:	d114      	bne.n	8001a32 <board_switch+0x13e>
			BOARD_6(ON);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	4849      	ldr	r0, [pc, #292]	; (8001b34 <board_switch+0x240>)
 8001a0e:	f7ff f8dc 	bl	8000bca <GPIO_WriteBit>
			MUX_0(ON);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2140      	movs	r1, #64	; 0x40
 8001a16:	4848      	ldr	r0, [pc, #288]	; (8001b38 <board_switch+0x244>)
 8001a18:	f7ff f8d7 	bl	8000bca <GPIO_WriteBit>
			MUX_1(OFF);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2120      	movs	r1, #32
 8001a20:	4845      	ldr	r0, [pc, #276]	; (8001b38 <board_switch+0x244>)
 8001a22:	f7ff f8d2 	bl	8000bca <GPIO_WriteBit>
			MUX_2(ON); //101
 8001a26:	2201      	movs	r2, #1
 8001a28:	2104      	movs	r1, #4
 8001a2a:	4844      	ldr	r0, [pc, #272]	; (8001b3c <board_switch+0x248>)
 8001a2c:	f7ff f8cd 	bl	8000bca <GPIO_WriteBit>
}
 8001a30:	e079      	b.n	8001b26 <board_switch+0x232>
		}	else if (N == 7) {
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b07      	cmp	r3, #7
 8001a36:	d114      	bne.n	8001a62 <board_switch+0x16e>
			BOARD_7(ON);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	483d      	ldr	r0, [pc, #244]	; (8001b34 <board_switch+0x240>)
 8001a3e:	f7ff f8c4 	bl	8000bca <GPIO_WriteBit>
			MUX_0(OFF);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2140      	movs	r1, #64	; 0x40
 8001a46:	483c      	ldr	r0, [pc, #240]	; (8001b38 <board_switch+0x244>)
 8001a48:	f7ff f8bf 	bl	8000bca <GPIO_WriteBit>
			MUX_1(ON);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2120      	movs	r1, #32
 8001a50:	4839      	ldr	r0, [pc, #228]	; (8001b38 <board_switch+0x244>)
 8001a52:	f7ff f8ba 	bl	8000bca <GPIO_WriteBit>
			MUX_2(ON); //110
 8001a56:	2201      	movs	r2, #1
 8001a58:	2104      	movs	r1, #4
 8001a5a:	4838      	ldr	r0, [pc, #224]	; (8001b3c <board_switch+0x248>)
 8001a5c:	f7ff f8b5 	bl	8000bca <GPIO_WriteBit>
}
 8001a60:	e061      	b.n	8001b26 <board_switch+0x232>
		} else if(N == 8) {
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d15e      	bne.n	8001b26 <board_switch+0x232>
			BOARD_8(ON);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4831      	ldr	r0, [pc, #196]	; (8001b34 <board_switch+0x240>)
 8001a6e:	f7ff f8ac 	bl	8000bca <GPIO_WriteBit>
			MUX_0(ON);
 8001a72:	2201      	movs	r2, #1
 8001a74:	2140      	movs	r1, #64	; 0x40
 8001a76:	4830      	ldr	r0, [pc, #192]	; (8001b38 <board_switch+0x244>)
 8001a78:	f7ff f8a7 	bl	8000bca <GPIO_WriteBit>
			MUX_1(ON);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2120      	movs	r1, #32
 8001a80:	482d      	ldr	r0, [pc, #180]	; (8001b38 <board_switch+0x244>)
 8001a82:	f7ff f8a2 	bl	8000bca <GPIO_WriteBit>
			MUX_2(ON); //111
 8001a86:	2201      	movs	r2, #1
 8001a88:	2104      	movs	r1, #4
 8001a8a:	482c      	ldr	r0, [pc, #176]	; (8001b3c <board_switch+0x248>)
 8001a8c:	f7ff f89d 	bl	8000bca <GPIO_WriteBit>
}
 8001a90:	e049      	b.n	8001b26 <board_switch+0x232>
		board_st = 0;
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <board_switch+0x23c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
		if (N == 1){
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <board_switch+0x1b6>
			BOARD_1(OFF);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	4824      	ldr	r0, [pc, #144]	; (8001b34 <board_switch+0x240>)
 8001aa4:	f7ff f891 	bl	8000bca <GPIO_WriteBit>
}
 8001aa8:	e03d      	b.n	8001b26 <board_switch+0x232>
		} else if(N == 2) {
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d105      	bne.n	8001abc <board_switch+0x1c8>
			BOARD_2(OFF);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	481f      	ldr	r0, [pc, #124]	; (8001b34 <board_switch+0x240>)
 8001ab6:	f7ff f888 	bl	8000bca <GPIO_WriteBit>
}
 8001aba:	e034      	b.n	8001b26 <board_switch+0x232>
		} else if (N == 3) {
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d105      	bne.n	8001ace <board_switch+0x1da>
			BOARD_3(OFF);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	481b      	ldr	r0, [pc, #108]	; (8001b34 <board_switch+0x240>)
 8001ac8:	f7ff f87f 	bl	8000bca <GPIO_WriteBit>
}
 8001acc:	e02b      	b.n	8001b26 <board_switch+0x232>
		} else if (N == 4){
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d105      	bne.n	8001ae0 <board_switch+0x1ec>
			BOARD_4(OFF);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	4816      	ldr	r0, [pc, #88]	; (8001b34 <board_switch+0x240>)
 8001ada:	f7ff f876 	bl	8000bca <GPIO_WriteBit>
}
 8001ade:	e022      	b.n	8001b26 <board_switch+0x232>
		} else if(N == 5) {
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d105      	bne.n	8001af2 <board_switch+0x1fe>
			BOARD_5(OFF);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2108      	movs	r1, #8
 8001aea:	4812      	ldr	r0, [pc, #72]	; (8001b34 <board_switch+0x240>)
 8001aec:	f7ff f86d 	bl	8000bca <GPIO_WriteBit>
}
 8001af0:	e019      	b.n	8001b26 <board_switch+0x232>
		} else if(N == 6) {
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b06      	cmp	r3, #6
 8001af6:	d105      	bne.n	8001b04 <board_switch+0x210>
			BOARD_6(OFF);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2104      	movs	r1, #4
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <board_switch+0x240>)
 8001afe:	f7ff f864 	bl	8000bca <GPIO_WriteBit>
}
 8001b02:	e010      	b.n	8001b26 <board_switch+0x232>
		} else if (N == 7) {
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	2b07      	cmp	r3, #7
 8001b08:	d105      	bne.n	8001b16 <board_switch+0x222>
			BOARD_7(OFF);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4809      	ldr	r0, [pc, #36]	; (8001b34 <board_switch+0x240>)
 8001b10:	f7ff f85b 	bl	8000bca <GPIO_WriteBit>
}
 8001b14:	e007      	b.n	8001b26 <board_switch+0x232>
		} else if (N == 8) {
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d104      	bne.n	8001b26 <board_switch+0x232>
			BOARD_8(OFF);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <board_switch+0x240>)
 8001b22:	f7ff f852 	bl	8000bca <GPIO_WriteBit>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000139 	.word	0x20000139
 8001b34:	40010800 	.word	0x40010800
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40011400 	.word	0x40011400

08001b40 <board_state>:

uint8_t board_state() {
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	return board_st;
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <board_state+0x10>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	20000139 	.word	0x20000139
 8001b54:	00000000 	.word	0x00000000

08001b58 <tester_task>:


void tester_task(){
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0

	static uint16_t CmdBuf[10];
	CmdBuf[0] = 0xAA;
 8001b5e:	4ba0      	ldr	r3, [pc, #640]	; (8001de0 <tester_task+0x288>)
 8001b60:	22aa      	movs	r2, #170	; 0xaa
 8001b62:	801a      	strh	r2, [r3, #0]
	CmdBuf[2] = 0x55;
 8001b64:	4b9e      	ldr	r3, [pc, #632]	; (8001de0 <tester_task+0x288>)
 8001b66:	2255      	movs	r2, #85	; 0x55
 8001b68:	809a      	strh	r2, [r3, #4]
	TASK_MAKE(false);
 8001b6a:	4b9e      	ldr	r3, [pc, #632]	; (8001de4 <tester_task+0x28c>)
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	4b9e      	ldr	r3, [pc, #632]	; (8001de8 <tester_task+0x290>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d00a      	beq.n	8001b8c <tester_task+0x34>
 8001b76:	4b9b      	ldr	r3, [pc, #620]	; (8001de4 <tester_task+0x28c>)
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	4b9b      	ldr	r3, [pc, #620]	; (8001de8 <tester_task+0x290>)
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	f7ff fc3b 	bl	80013f8 <get_timestamp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	460c      	mov	r4, r1
 8001b86:	4a99      	ldr	r2, [pc, #612]	; (8001dec <tester_task+0x294>)
 8001b88:	e882 0018 	stmia.w	r2, {r3, r4}
	if (st == 0) {
 8001b8c:	4b95      	ldr	r3, [pc, #596]	; (8001de4 <tester_task+0x28c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d103      	bne.n	8001b9c <tester_task+0x44>
		st = 1;
 8001b94:	4b93      	ldr	r3, [pc, #588]	; (8001de4 <tester_task+0x28c>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
				printf("CONNECTION WITH PIR FAILD\r\n");
				fifo_pop(command_fifo_id);
			}
		}
	}
}
 8001b9a:	e116      	b.n	8001dca <tester_task+0x272>
	} else if (st == 1) {
 8001b9c:	4b91      	ldr	r3, [pc, #580]	; (8001de4 <tester_task+0x28c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d122      	bne.n	8001bea <tester_task+0x92>
		if (delay_ms(ts, 50) && (cmd_aval() !=  CMD_NONE)) {
 8001ba4:	4b91      	ldr	r3, [pc, #580]	; (8001dec <tester_task+0x294>)
 8001ba6:	cb18      	ldmia	r3, {r3, r4}
 8001ba8:	2232      	movs	r2, #50	; 0x32
 8001baa:	4618      	mov	r0, r3
 8001bac:	4621      	mov	r1, r4
 8001bae:	f7ff fbf1 	bl	8001394 <delay_ms>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8108 	beq.w	8001dca <tester_task+0x272>
 8001bba:	f000 f931 	bl	8001e20 <cmd_aval>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	f000 8102 	beq.w	8001dca <tester_task+0x272>
			CMD = cmd_aval();
 8001bc6:	f000 f92b 	bl	8001e20 <cmd_aval>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <tester_task+0x298>)
 8001bd0:	801a      	strh	r2, [r3, #0]
			CmdBuf[1] = CMD;
 8001bd2:	4b87      	ldr	r3, [pc, #540]	; (8001df0 <tester_task+0x298>)
 8001bd4:	881a      	ldrh	r2, [r3, #0]
 8001bd6:	4b82      	ldr	r3, [pc, #520]	; (8001de0 <tester_task+0x288>)
 8001bd8:	805a      	strh	r2, [r3, #2]
			uart_transmit(CmdBuf,3);
 8001bda:	2103      	movs	r1, #3
 8001bdc:	4880      	ldr	r0, [pc, #512]	; (8001de0 <tester_task+0x288>)
 8001bde:	f7ff fe61 	bl	80018a4 <uart_transmit>
			TASK_STEP(2);
 8001be2:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <tester_task+0x28c>)
 8001be4:	2202      	movs	r2, #2
 8001be6:	701a      	strb	r2, [r3, #0]
}
 8001be8:	e0ef      	b.n	8001dca <tester_task+0x272>
	} else if(st == 2) {
 8001bea:	4b7e      	ldr	r3, [pc, #504]	; (8001de4 <tester_task+0x28c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	f040 80eb 	bne.w	8001dca <tester_task+0x272>
		if( RXBufCntr >= PIR_MAX && delay_ms(RXBufTs, 5)) {
 8001bf4:	4b7f      	ldr	r3, [pc, #508]	; (8001df4 <tester_task+0x29c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b11      	cmp	r3, #17
 8001bfa:	f240 80e6 	bls.w	8001dca <tester_task+0x272>
 8001bfe:	4b7e      	ldr	r3, [pc, #504]	; (8001df8 <tester_task+0x2a0>)
 8001c00:	cb18      	ldmia	r3, {r3, r4}
 8001c02:	2205      	movs	r2, #5
 8001c04:	4618      	mov	r0, r3
 8001c06:	4621      	mov	r1, r4
 8001c08:	f7ff fbc4 	bl	8001394 <delay_ms>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80db 	beq.w	8001dca <tester_task+0x272>
			RXBufCntr = 0;
 8001c14:	4b77      	ldr	r3, [pc, #476]	; (8001df4 <tester_task+0x29c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
			TASK_STEP(0);
 8001c1a:	4b72      	ldr	r3, [pc, #456]	; (8001de4 <tester_task+0x28c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
			if(RXBuffer[PIR_START_1] == 0xAA && RXBuffer[PIR_START_2] == 0xAA && RXBuffer[PIR_STOP_1] == 0x55 && RXBuffer[PIR_STOP_2] == 0x55)
 8001c20:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <tester_task+0x2a4>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2baa      	cmp	r3, #170	; 0xaa
 8001c26:	f040 80bb 	bne.w	8001da0 <tester_task+0x248>
 8001c2a:	4b74      	ldr	r3, [pc, #464]	; (8001dfc <tester_task+0x2a4>)
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	2baa      	cmp	r3, #170	; 0xaa
 8001c30:	f040 80b6 	bne.w	8001da0 <tester_task+0x248>
 8001c34:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <tester_task+0x2a4>)
 8001c36:	7c1b      	ldrb	r3, [r3, #16]
 8001c38:	2b55      	cmp	r3, #85	; 0x55
 8001c3a:	f040 80b1 	bne.w	8001da0 <tester_task+0x248>
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <tester_task+0x2a4>)
 8001c40:	7c5b      	ldrb	r3, [r3, #17]
 8001c42:	2b55      	cmp	r3, #85	; 0x55
 8001c44:	f040 80ac 	bne.w	8001da0 <tester_task+0x248>
				for(i = 0; i < PIR_MAX;i++){
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	e007      	b.n	8001c5e <tester_task+0x106>
					PirHealth[i] = 0;
 8001c4e:	4a6c      	ldr	r2, [pc, #432]	; (8001e00 <tester_task+0x2a8>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2100      	movs	r1, #0
 8001c54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(i = 0; i < PIR_MAX;i++){
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b11      	cmp	r3, #17
 8001c62:	ddf4      	ble.n	8001c4e <tester_task+0xf6>
				PirHealth[LAST_CMD] |= RXBuffer[LAST_CMD_2];
 8001c64:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <tester_task+0x2a8>)
 8001c66:	895a      	ldrh	r2, [r3, #10]
 8001c68:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <tester_task+0x2a4>)
 8001c6a:	7b5b      	ldrb	r3, [r3, #13]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <tester_task+0x2a8>)
 8001c74:	815a      	strh	r2, [r3, #10]
				PirHealth[LAST_CMD] |= (RXBuffer[LAST_CMD_1] << 8);
 8001c76:	4b62      	ldr	r3, [pc, #392]	; (8001e00 <tester_task+0x2a8>)
 8001c78:	895b      	ldrh	r3, [r3, #10]
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b5f      	ldr	r3, [pc, #380]	; (8001dfc <tester_task+0x2a4>)
 8001c7e:	7b1b      	ldrb	r3, [r3, #12]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b5d      	ldr	r3, [pc, #372]	; (8001e00 <tester_task+0x2a8>)
 8001c8c:	815a      	strh	r2, [r3, #10]
				if (PirHealth[LAST_CMD] == NONE){
 8001c8e:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <tester_task+0x2a8>)
 8001c90:	895b      	ldrh	r3, [r3, #10]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d179      	bne.n	8001d8a <tester_task+0x232>
					PirHealth[PIR_KEYS_STATE] |= RXBuffer[PIR_KEYS_STATE_2];
 8001c96:	4b5a      	ldr	r3, [pc, #360]	; (8001e00 <tester_task+0x2a8>)
 8001c98:	889a      	ldrh	r2, [r3, #4]
 8001c9a:	4b58      	ldr	r3, [pc, #352]	; (8001dfc <tester_task+0x2a4>)
 8001c9c:	79db      	ldrb	r3, [r3, #7]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <tester_task+0x2a8>)
 8001ca6:	809a      	strh	r2, [r3, #4]
					PirHealth[PIR_KEYS_STATE] |= (RXBuffer[PIR_KEYS_STATE_1] << 8) ;
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <tester_task+0x2a8>)
 8001caa:	889b      	ldrh	r3, [r3, #4]
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	4b53      	ldr	r3, [pc, #332]	; (8001dfc <tester_task+0x2a4>)
 8001cb0:	799b      	ldrb	r3, [r3, #6]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <tester_task+0x2a8>)
 8001cbe:	809a      	strh	r2, [r3, #4]
					printf("PIR KEY STATE IS %d\r\n",PirHealth[PIR_KEYS_STATE]);
 8001cc0:	4b4f      	ldr	r3, [pc, #316]	; (8001e00 <tester_task+0x2a8>)
 8001cc2:	889b      	ldrh	r3, [r3, #4]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	484f      	ldr	r0, [pc, #316]	; (8001e04 <tester_task+0x2ac>)
 8001cc8:	f001 fb1e 	bl	8003308 <iprintf>
					if(RXBuffer[PIR_TEMP_READY_2] == 1){
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <tester_task+0x2a4>)
 8001cce:	7adb      	ldrb	r3, [r3, #11]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11e      	bne.n	8001d12 <tester_task+0x1ba>
						PirHealth[PIR_TEMP_READY] = 1;
 8001cd4:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <tester_task+0x2a8>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	811a      	strh	r2, [r3, #8]
						PirHealth[PIR_NTC] |= RXBuffer[PIR_NTC_2];
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <tester_task+0x2a8>)
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <tester_task+0x2a4>)
 8001ce0:	78db      	ldrb	r3, [r3, #3]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <tester_task+0x2a8>)
 8001cea:	801a      	strh	r2, [r3, #0]
						PirHealth[PIR_NTC] |= (RXBuffer[PIR_NTC_1] << 8) ;
 8001cec:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <tester_task+0x2a8>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <tester_task+0x2a4>)
 8001cf4:	789b      	ldrb	r3, [r3, #2]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <tester_task+0x2a8>)
 8001d02:	801a      	strh	r2, [r3, #0]
						printf("NTC VALUE IS: %d\r\n",PirHealth[PIR_NTC]);
 8001d04:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <tester_task+0x2a8>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	483f      	ldr	r0, [pc, #252]	; (8001e08 <tester_task+0x2b0>)
 8001d0c:	f001 fafc 	bl	8003308 <iprintf>
 8001d10:	e002      	b.n	8001d18 <tester_task+0x1c0>
						printf("NTC IS NOT READY\r\n");
 8001d12:	483e      	ldr	r0, [pc, #248]	; (8001e0c <tester_task+0x2b4>)
 8001d14:	f001 fb42 	bl	800339c <puts>
					if(RXBuffer[PIR_SENSOR_READY_2] == 1){
 8001d18:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <tester_task+0x2a4>)
 8001d1a:	7a5b      	ldrb	r3, [r3, #9]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d12d      	bne.n	8001d7c <tester_task+0x224>
						PirHealth[PIR_SENSOR_READY] = 1;
 8001d20:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <tester_task+0x2a8>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	80da      	strh	r2, [r3, #6]
						PirHealth[PIR_SENSOR] |= RXBuffer[PIR_SENSOR_2];
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <tester_task+0x2a8>)
 8001d28:	885a      	ldrh	r2, [r3, #2]
 8001d2a:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <tester_task+0x2a4>)
 8001d2c:	795b      	ldrb	r3, [r3, #5]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <tester_task+0x2a8>)
 8001d36:	805a      	strh	r2, [r3, #2]
						PirHealth[PIR_SENSOR] |= (RXBuffer[PIR_SENSOR_1] << 8);
 8001d38:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <tester_task+0x2a8>)
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <tester_task+0x2a4>)
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <tester_task+0x2a8>)
 8001d4e:	805a      	strh	r2, [r3, #2]
						printf("SENSOR ADC VALUE IS %d\r\n",(uint16_t)( PirHealth[PIR_SENSOR] * 1.22));
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <tester_task+0x2a8>)
 8001d52:	885b      	ldrh	r3, [r3, #2]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbcb 	bl	80004f0 <__aeabi_i2d>
 8001d5a:	a31f      	add	r3, pc, #124	; (adr r3, 8001dd8 <tester_task+0x280>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc2c 	bl	80005bc <__aeabi_dmul>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	f7fe fe38 	bl	80009e0 <__aeabi_d2uiz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	4826      	ldr	r0, [pc, #152]	; (8001e10 <tester_task+0x2b8>)
 8001d78:	f001 fac6 	bl	8003308 <iprintf>
					if (RXBuffer[ALARM_ERR_2] == 1) {
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <tester_task+0x2a4>)
 8001d7e:	7bdb      	ldrb	r3, [r3, #15]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d102      	bne.n	8001d8a <tester_task+0x232>
						printf("ALARM-ERR\r\n");
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <tester_task+0x2bc>)
 8001d86:	f001 fb09 	bl	800339c <puts>
				if(CMD == PirHealth[LAST_CMD]){
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <tester_task+0x2a8>)
 8001d8c:	895a      	ldrh	r2, [r3, #10]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <tester_task+0x298>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d104      	bne.n	8001da0 <tester_task+0x248>
					 fifo_pop(command_fifo_id);
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <tester_task+0x2c0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fc2e 	bl	80015fc <fifo_pop>
			if (delay_s(ts, 5)) {
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <tester_task+0x294>)
 8001da2:	cb18      	ldmia	r3, {r3, r4}
 8001da4:	2205      	movs	r2, #5
 8001da6:	4618      	mov	r0, r3
 8001da8:	4621      	mov	r1, r4
 8001daa:	f7ff fb10 	bl	80013ce <delay_s>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <tester_task+0x272>
				st = 0;
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <tester_task+0x28c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
				printf("CONNECTION WITH PIR FAILD\r\n");
 8001dba:	4818      	ldr	r0, [pc, #96]	; (8001e1c <tester_task+0x2c4>)
 8001dbc:	f001 faee 	bl	800339c <puts>
				fifo_pop(command_fifo_id);
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <tester_task+0x2c0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fc19 	bl	80015fc <fifo_pop>
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	b851eb85 	.word	0xb851eb85
 8001ddc:	3ff3851e 	.word	0x3ff3851e
 8001de0:	20000158 	.word	0x20000158
 8001de4:	2000016c 	.word	0x2000016c
 8001de8:	2000016d 	.word	0x2000016d
 8001dec:	20000170 	.word	0x20000170
 8001df0:	20000150 	.word	0x20000150
 8001df4:	20000138 	.word	0x20000138
 8001df8:	20000140 	.word	0x20000140
 8001dfc:	20000124 	.word	0x20000124
 8001e00:	200000fc 	.word	0x200000fc
 8001e04:	080034b0 	.word	0x080034b0
 8001e08:	080034c8 	.word	0x080034c8
 8001e0c:	080034dc 	.word	0x080034dc
 8001e10:	080034f0 	.word	0x080034f0
 8001e14:	0800350c 	.word	0x0800350c
 8001e18:	20000157 	.word	0x20000157
 8001e1c:	08003518 	.word	0x08003518

08001e20 <cmd_aval>:




cp_cmd_enu cmd_aval() {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	uint8_t *ptr;
	if (!fifo_empty(command_fifo_id)) {
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <cmd_aval+0x34>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fbca 	bl	80015c4 <fifo_empty>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d108      	bne.n	8001e48 <cmd_aval+0x28>
		ptr = fifo_pop_stay(command_fifo_id);
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <cmd_aval+0x34>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fc1e 	bl	800167c <fifo_pop_stay>
 8001e40:	6078      	str	r0, [r7, #4]
		return *ptr;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	e000      	b.n	8001e4a <cmd_aval+0x2a>
	}
	return CMD_NONE;
 8001e48:	2303      	movs	r3, #3
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000157 	.word	0x20000157

08001e58 <cmd_req>:

void cmd_req(cp_cmd_enu _cmd) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
//	printf("cmd %s req\r\n", CMD_TITLE[_cmd]);
	fifo_push(command_fifo_id, &_cmd);
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <cmd_req+0x20>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	1dfa      	adds	r2, r7, #7
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fb34 	bl	80014d8 <fifo_push>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000157 	.word	0x20000157

08001e7c <task_dbg_mng>:

void task_dbg_mng() {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
	char str[20];
	memset(str,'\0',20);
 8001e82:	463b      	mov	r3, r7
 8001e84:	2214      	movs	r2, #20
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 fae2 	bl	8003452 <memset>
	int i;
	if (DBGBUF_RDY) {
 8001e8e:	4b63      	ldr	r3, [pc, #396]	; (800201c <task_dbg_mng+0x1a0>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80bf 	beq.w	8002016 <task_dbg_mng+0x19a>
		DBGBUF_RDY = false;
 8001e98:	4b60      	ldr	r3, [pc, #384]	; (800201c <task_dbg_mng+0x1a0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
		for (i = 1;i <= 8;i++) {
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e045      	b.n	8001f30 <task_dbg_mng+0xb4>
			sprintf(str,"board %d on",i);
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	495d      	ldr	r1, [pc, #372]	; (8002020 <task_dbg_mng+0x1a4>)
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 fa16 	bl	80032dc <siprintf>
			if (strcmp(DBGBUF, str) == 0) {
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	485b      	ldr	r0, [pc, #364]	; (8002024 <task_dbg_mng+0x1a8>)
 8001eb6:	f7fe f9b7 	bl	8000228 <strcmp>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d134      	bne.n	8001f2a <task_dbg_mng+0xae>
				if(i == last_board){
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <task_dbg_mng+0x1ac>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d107      	bne.n	8001edc <task_dbg_mng+0x60>
					printf("BOARD %d ON ALREADY\r\n",board_state());
 8001ecc:	f7ff fe38 	bl	8001b40 <board_state>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4855      	ldr	r0, [pc, #340]	; (800202c <task_dbg_mng+0x1b0>)
 8001ed6:	f001 fa17 	bl	8003308 <iprintf>
					}
					board_switch(i, ON);
					printf("BOARD %d ON\r\n",board_state());
					last_board = board_state();
				}
			return;
 8001eda:	e09c      	b.n	8002016 <task_dbg_mng+0x19a>
					if(board_state() != 0) {
 8001edc:	f7ff fe30 	bl	8001b40 <board_state>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <task_dbg_mng+0x86>
						printf("BOARD %d OFF AUTOMATICALLY\r\n",board_state());
 8001ee6:	f7ff fe2b 	bl	8001b40 <board_state>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4619      	mov	r1, r3
 8001eee:	4850      	ldr	r0, [pc, #320]	; (8002030 <task_dbg_mng+0x1b4>)
 8001ef0:	f001 fa0a 	bl	8003308 <iprintf>
						board_switch(board_state(),OFF);
 8001ef4:	f7ff fe24 	bl	8001b40 <board_state>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fcf9 	bl	80018f4 <board_switch>
					board_switch(i, ON);
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2101      	movs	r1, #1
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fcf3 	bl	80018f4 <board_switch>
					printf("BOARD %d ON\r\n",board_state());
 8001f0e:	f7ff fe17 	bl	8001b40 <board_state>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4619      	mov	r1, r3
 8001f16:	4847      	ldr	r0, [pc, #284]	; (8002034 <task_dbg_mng+0x1b8>)
 8001f18:	f001 f9f6 	bl	8003308 <iprintf>
					last_board = board_state();
 8001f1c:	f7ff fe10 	bl	8001b40 <board_state>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <task_dbg_mng+0x1ac>)
 8001f26:	701a      	strb	r2, [r3, #0]
			return;
 8001f28:	e075      	b.n	8002016 <task_dbg_mng+0x19a>
		for (i = 1;i <= 8;i++) {
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	ddb6      	ble.n	8001ea4 <task_dbg_mng+0x28>
			}
		}
		for (i = 1;i <= 8;i++){
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e01b      	b.n	8001f74 <task_dbg_mng+0xf8>
			sprintf(str,"board %d off",i);
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	493d      	ldr	r1, [pc, #244]	; (8002038 <task_dbg_mng+0x1bc>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 f9ca 	bl	80032dc <siprintf>
			if (strcmp(DBGBUF, str) == 0) {
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4835      	ldr	r0, [pc, #212]	; (8002024 <task_dbg_mng+0x1a8>)
 8001f4e:	f7fe f96b 	bl	8000228 <strcmp>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <task_dbg_mng+0xf2>
				board_switch(i, OFF);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fcc8 	bl	80018f4 <board_switch>
				printf("BOARD %d OFF\r\n",i);
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	4835      	ldr	r0, [pc, #212]	; (800203c <task_dbg_mng+0x1c0>)
 8001f68:	f001 f9ce 	bl	8003308 <iprintf>
				return;
 8001f6c:	e053      	b.n	8002016 <task_dbg_mng+0x19a>
		for (i = 1;i <= 8;i++){
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	dde0      	ble.n	8001f3c <task_dbg_mng+0xc0>
			}
		}
		for (i = 1;i <= 8;i++){
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e023      	b.n	8001fc8 <task_dbg_mng+0x14c>
			sprintf(str,"run %d",i);
 8001f80:	463b      	mov	r3, r7
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	492e      	ldr	r1, [pc, #184]	; (8002040 <task_dbg_mng+0x1c4>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f9a8 	bl	80032dc <siprintf>
			if (strcmp(DBGBUF, str) == 0) {
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4824      	ldr	r0, [pc, #144]	; (8002024 <task_dbg_mng+0x1a8>)
 8001f92:	f7fe f949 	bl	8000228 <strcmp>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d112      	bne.n	8001fc2 <task_dbg_mng+0x146>
				if (i == board_state()){
 8001f9c:	f7ff fdd0 	bl	8001b40 <board_state>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d106      	bne.n	8001fb8 <task_dbg_mng+0x13c>
					DBGBUF_CNTR = 0;
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <task_dbg_mng+0x1c8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
					req_start = true;
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <task_dbg_mng+0x1cc>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
				} else {
					printf("BOARD %d IS OFF\r\n",i);
				}
				return;
 8001fb6:	e02e      	b.n	8002016 <task_dbg_mng+0x19a>
					printf("BOARD %d IS OFF\r\n",i);
 8001fb8:	6979      	ldr	r1, [r7, #20]
 8001fba:	4824      	ldr	r0, [pc, #144]	; (800204c <task_dbg_mng+0x1d0>)
 8001fbc:	f001 f9a4 	bl	8003308 <iprintf>
				return;
 8001fc0:	e029      	b.n	8002016 <task_dbg_mng+0x19a>
		for (i = 1;i <= 8;i++){
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	ddd8      	ble.n	8001f80 <task_dbg_mng+0x104>
			}
		}
		for (i = 1;i <= 8;i++){
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e01a      	b.n	800200a <task_dbg_mng+0x18e>
			sprintf(str,"stop %d",i);
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	491d      	ldr	r1, [pc, #116]	; (8002050 <task_dbg_mng+0x1d4>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f001 f97e 	bl	80032dc <siprintf>
			if (strcmp(DBGBUF, str) == 0) {
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480f      	ldr	r0, [pc, #60]	; (8002024 <task_dbg_mng+0x1a8>)
 8001fe6:	f7fe f91f 	bl	8000228 <strcmp>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <task_dbg_mng+0x188>
				printf("TEST STOPPED BY CMD");
 8001ff0:	4818      	ldr	r0, [pc, #96]	; (8002054 <task_dbg_mng+0x1d8>)
 8001ff2:	f001 f989 	bl	8003308 <iprintf>
				DBGBUF_CNTR = 0;
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <task_dbg_mng+0x1c8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
				req_stop = 0;
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <task_dbg_mng+0x1dc>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
				return;
 8002002:	e008      	b.n	8002016 <task_dbg_mng+0x19a>
		for (i = 1;i <= 8;i++){
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b08      	cmp	r3, #8
 800200e:	dde1      	ble.n	8001fd4 <task_dbg_mng+0x158>
			}
		}
		DBGBUF_CNTR = 0;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <task_dbg_mng+0x1c8>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
	}
}
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000154 	.word	0x20000154
 8002020:	08003534 	.word	0x08003534
 8002024:	20000474 	.word	0x20000474
 8002028:	20000120 	.word	0x20000120
 800202c:	08003540 	.word	0x08003540
 8002030:	08003558 	.word	0x08003558
 8002034:	08003578 	.word	0x08003578
 8002038:	08003588 	.word	0x08003588
 800203c:	08003598 	.word	0x08003598
 8002040:	080035a8 	.word	0x080035a8
 8002044:	20000153 	.word	0x20000153
 8002048:	20000155 	.word	0x20000155
 800204c:	080035b0 	.word	0x080035b0
 8002050:	080035c4 	.word	0x080035c4
 8002054:	080035cc 	.word	0x080035cc
 8002058:	20000156 	.word	0x20000156
 800205c:	00000000 	.word	0x00000000

08002060 <task_test>:
void task_test() {
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
	TASK_MAKE(false);
 8002066:	4bb4      	ldr	r3, [pc, #720]	; (8002338 <task_test+0x2d8>)
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	4bb4      	ldr	r3, [pc, #720]	; (800233c <task_test+0x2dc>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d00a      	beq.n	8002088 <task_test+0x28>
 8002072:	4bb1      	ldr	r3, [pc, #708]	; (8002338 <task_test+0x2d8>)
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	4bb1      	ldr	r3, [pc, #708]	; (800233c <task_test+0x2dc>)
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	f7ff f9bd 	bl	80013f8 <get_timestamp>
 800207e:	4603      	mov	r3, r0
 8002080:	460c      	mov	r4, r1
 8002082:	4aaf      	ldr	r2, [pc, #700]	; (8002340 <task_test+0x2e0>)
 8002084:	e882 0018 	stmia.w	r2, {r3, r4}
	static int N = 0;
	static long unsigned int adc_temp[5] = {0,0,0,0,0};
	uint16_t current_value;
	if (requested_stop()) {
 8002088:	f7ff fbfa 	bl	8001880 <requested_stop>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <task_test+0x48>
		st = 0;
 8002092:	4ba9      	ldr	r3, [pc, #676]	; (8002338 <task_test+0x2d8>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
		fifo_clear(command_fifo_id);
 8002098:	4baa      	ldr	r3, [pc, #680]	; (8002344 <task_test+0x2e4>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fb27 	bl	80016f0 <fifo_clear>
		connection_flag = false;
 80020a2:	4ba9      	ldr	r3, [pc, #676]	; (8002348 <task_test+0x2e8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
	}
	if (st != 0) {
 80020a8:	4ba3      	ldr	r3, [pc, #652]	; (8002338 <task_test+0x2d8>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <task_test+0x54>
		requested_start();
 80020b0:	f7ff fbd4 	bl	800185c <requested_start>
	}
	if (st == 0) {
 80020b4:	4ba0      	ldr	r3, [pc, #640]	; (8002338 <task_test+0x2d8>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d111      	bne.n	80020e0 <task_test+0x80>
		if (requested_start()) {
 80020bc:	f7ff fbce 	bl	800185c <requested_start>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8303 	beq.w	80026ce <task_test+0x66e>
			printf("TEST-RUNNING\r\n");
 80020c8:	48a0      	ldr	r0, [pc, #640]	; (800234c <task_test+0x2ec>)
 80020ca:	f001 f967 	bl	800339c <puts>
			TASK_STEP(1);
 80020ce:	4b9a      	ldr	r3, [pc, #616]	; (8002338 <task_test+0x2d8>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
			fifo_clear(command_fifo_id);
 80020d4:	4b9b      	ldr	r3, [pc, #620]	; (8002344 <task_test+0x2e4>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fb09 	bl	80016f0 <fifo_clear>

			printf("TEST-FIN\r\n");
			TASK_STEP(0);

	}
}
 80020de:	e2f6      	b.n	80026ce <task_test+0x66e>
	} else if (st == 1){
 80020e0:	4b95      	ldr	r3, [pc, #596]	; (8002338 <task_test+0x2d8>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f040 80a8 	bne.w	800223a <task_test+0x1da>
		adc_temp[PIR_POWER_ADC] += adc_mng_value(pir_power);
 80020ea:	4b99      	ldr	r3, [pc, #612]	; (8002350 <task_test+0x2f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f869 	bl	80011c8 <adc_mng_value>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b96      	ldr	r3, [pc, #600]	; (8002354 <task_test+0x2f4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a94      	ldr	r2, [pc, #592]	; (8002354 <task_test+0x2f4>)
 8002102:	6013      	str	r3, [r2, #0]
		adc_temp[POWER_1_ADC] += adc_mng_value(a_power_2);
 8002104:	4b94      	ldr	r3, [pc, #592]	; (8002358 <task_test+0x2f8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f85c 	bl	80011c8 <adc_mng_value>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	4b8f      	ldr	r3, [pc, #572]	; (8002354 <task_test+0x2f4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4413      	add	r3, r2
 800211a:	4a8e      	ldr	r2, [pc, #568]	; (8002354 <task_test+0x2f4>)
 800211c:	6053      	str	r3, [r2, #4]
		adc_temp[POWER_2_ADC] += adc_mng_value(a_power_1);
 800211e:	4b8f      	ldr	r3, [pc, #572]	; (800235c <task_test+0x2fc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f84f 	bl	80011c8 <adc_mng_value>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	4b89      	ldr	r3, [pc, #548]	; (8002354 <task_test+0x2f4>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	4413      	add	r3, r2
 8002134:	4a87      	ldr	r2, [pc, #540]	; (8002354 <task_test+0x2f4>)
 8002136:	6093      	str	r3, [r2, #8]
		N++;
 8002138:	4b89      	ldr	r3, [pc, #548]	; (8002360 <task_test+0x300>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a88      	ldr	r2, [pc, #544]	; (8002360 <task_test+0x300>)
 8002140:	6013      	str	r3, [r2, #0]
		if (delay_s(ts, 3)) {
 8002142:	4b7f      	ldr	r3, [pc, #508]	; (8002340 <task_test+0x2e0>)
 8002144:	cb18      	ldmia	r3, {r3, r4}
 8002146:	2203      	movs	r2, #3
 8002148:	4618      	mov	r0, r3
 800214a:	4621      	mov	r1, r4
 800214c:	f7ff f93f 	bl	80013ce <delay_s>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 82bb 	beq.w	80026ce <task_test+0x66e>
			adc_temp[PIR_POWER_ADC] /= N;
 8002158:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <task_test+0x2f4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a80      	ldr	r2, [pc, #512]	; (8002360 <task_test+0x300>)
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	fbb3 f3f2 	udiv	r3, r3, r2
 8002164:	4a7b      	ldr	r2, [pc, #492]	; (8002354 <task_test+0x2f4>)
 8002166:	6013      	str	r3, [r2, #0]
			adc_temp[POWER_1_ADC] /= N;
 8002168:	4b7a      	ldr	r3, [pc, #488]	; (8002354 <task_test+0x2f4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a7c      	ldr	r2, [pc, #496]	; (8002360 <task_test+0x300>)
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	fbb3 f3f2 	udiv	r3, r3, r2
 8002174:	4a77      	ldr	r2, [pc, #476]	; (8002354 <task_test+0x2f4>)
 8002176:	6053      	str	r3, [r2, #4]
			adc_temp[POWER_2_ADC] /= N;
 8002178:	4b76      	ldr	r3, [pc, #472]	; (8002354 <task_test+0x2f4>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a78      	ldr	r2, [pc, #480]	; (8002360 <task_test+0x300>)
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	fbb3 f3f2 	udiv	r3, r3, r2
 8002184:	4a73      	ldr	r2, [pc, #460]	; (8002354 <task_test+0x2f4>)
 8002186:	6093      	str	r3, [r2, #8]
			N = 0;
 8002188:	4b75      	ldr	r3, [pc, #468]	; (8002360 <task_test+0x300>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
			current_value = ((uint16_t)(adc_temp[POWER_2_ADC] * 0.805) - (uint16_t)(adc_temp[POWER_1_ADC] * 0.805));
 800218e:	4b71      	ldr	r3, [pc, #452]	; (8002354 <task_test+0x2f4>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f99c 	bl	80004d0 <__aeabi_ui2d>
 8002198:	a365      	add	r3, pc, #404	; (adr r3, 8002330 <task_test+0x2d0>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe fa0d 	bl	80005bc <__aeabi_dmul>
 80021a2:	4603      	mov	r3, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	4618      	mov	r0, r3
 80021a8:	4621      	mov	r1, r4
 80021aa:	f7fe fc19 	bl	80009e0 <__aeabi_d2uiz>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29c      	uxth	r4, r3
 80021b2:	4b68      	ldr	r3, [pc, #416]	; (8002354 <task_test+0x2f4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f98a 	bl	80004d0 <__aeabi_ui2d>
 80021bc:	a35c      	add	r3, pc, #368	; (adr r3, 8002330 <task_test+0x2d0>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe f9fb 	bl	80005bc <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fc07 	bl	80009e0 <__aeabi_d2uiz>
 80021d2:	4603      	mov	r3, r0
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	1ae3      	subs	r3, r4, r3
 80021d8:	80fb      	strh	r3, [r7, #6]
			printf("CURRENT: %d\r\n",current_value);
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	4619      	mov	r1, r3
 80021de:	4861      	ldr	r0, [pc, #388]	; (8002364 <task_test+0x304>)
 80021e0:	f001 f892 	bl	8003308 <iprintf>
			printf("POWER 5V: %d\r\n", (uint16_t)(adc_temp[PIR_POWER_ADC] * 0.805 * 2));
 80021e4:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <task_test+0x2f4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f971 	bl	80004d0 <__aeabi_ui2d>
 80021ee:	a350      	add	r3, pc, #320	; (adr r3, 8002330 <task_test+0x2d0>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe f9e2 	bl	80005bc <__aeabi_dmul>
 80021f8:	4603      	mov	r3, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	4618      	mov	r0, r3
 80021fe:	4621      	mov	r1, r4
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	f7fe f828 	bl	8000258 <__adddf3>
 8002208:	4603      	mov	r3, r0
 800220a:	460c      	mov	r4, r1
 800220c:	4618      	mov	r0, r3
 800220e:	4621      	mov	r1, r4
 8002210:	f7fe fbe6 	bl	80009e0 <__aeabi_d2uiz>
 8002214:	4603      	mov	r3, r0
 8002216:	b29b      	uxth	r3, r3
 8002218:	4619      	mov	r1, r3
 800221a:	4853      	ldr	r0, [pc, #332]	; (8002368 <task_test+0x308>)
 800221c:	f001 f874 	bl	8003308 <iprintf>
			adc_temp[PIR_POWER_ADC] = 0;
 8002220:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <task_test+0x2f4>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
			adc_temp[POWER_1_ADC] = 0;
 8002226:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <task_test+0x2f4>)
 8002228:	2200      	movs	r2, #0
 800222a:	605a      	str	r2, [r3, #4]
			adc_temp[POWER_2_ADC] = 0;
 800222c:	4b49      	ldr	r3, [pc, #292]	; (8002354 <task_test+0x2f4>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
			TASK_STEP(2);
 8002232:	4b41      	ldr	r3, [pc, #260]	; (8002338 <task_test+0x2d8>)
 8002234:	2202      	movs	r2, #2
 8002236:	701a      	strb	r2, [r3, #0]
}
 8002238:	e249      	b.n	80026ce <task_test+0x66e>
	} else if (st == 2) {
 800223a:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <task_test+0x2d8>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d111      	bne.n	8002266 <task_test+0x206>
		if (delay_s(ts, 3)) {
 8002242:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <task_test+0x2e0>)
 8002244:	cb18      	ldmia	r3, {r3, r4}
 8002246:	2203      	movs	r2, #3
 8002248:	4618      	mov	r0, r3
 800224a:	4621      	mov	r1, r4
 800224c:	f7ff f8bf 	bl	80013ce <delay_s>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 823b 	beq.w	80026ce <task_test+0x66e>
		cmd_req(CPC_OFF);
 8002258:	2001      	movs	r0, #1
 800225a:	f7ff fdfd 	bl	8001e58 <cmd_req>
		TASK_STEP(3);
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <task_test+0x2d8>)
 8002260:	2203      	movs	r2, #3
 8002262:	701a      	strb	r2, [r3, #0]
}
 8002264:	e233      	b.n	80026ce <task_test+0x66e>
	} else if (st == 3) {
 8002266:	4b34      	ldr	r3, [pc, #208]	; (8002338 <task_test+0x2d8>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d12e      	bne.n	80022cc <task_test+0x26c>
		if (delay_s(ts, 1)  && fifo_empty(command_fifo_id)) {
 800226e:	4b34      	ldr	r3, [pc, #208]	; (8002340 <task_test+0x2e0>)
 8002270:	cb18      	ldmia	r3, {r3, r4}
 8002272:	2201      	movs	r2, #1
 8002274:	4618      	mov	r0, r3
 8002276:	4621      	mov	r1, r4
 8002278:	f7ff f8a9 	bl	80013ce <delay_s>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00f      	beq.n	80022a2 <task_test+0x242>
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <task_test+0x2e4>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f99c 	bl	80015c4 <fifo_empty>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <task_test+0x242>
			GPIO_WriteBit(COM_SWITCH_PORT,COM_SWITCH_PIN, ON);
 8002292:	2201      	movs	r2, #1
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	4835      	ldr	r0, [pc, #212]	; (800236c <task_test+0x30c>)
 8002298:	f7fe fc97 	bl	8000bca <GPIO_WriteBit>
			TASK_STEP(4);
 800229c:	4b26      	ldr	r3, [pc, #152]	; (8002338 <task_test+0x2d8>)
 800229e:	2204      	movs	r2, #4
 80022a0:	701a      	strb	r2, [r3, #0]
		if (delay_s(ts, 3)) {
 80022a2:	4b27      	ldr	r3, [pc, #156]	; (8002340 <task_test+0x2e0>)
 80022a4:	cb18      	ldmia	r3, {r3, r4}
 80022a6:	2203      	movs	r2, #3
 80022a8:	4618      	mov	r0, r3
 80022aa:	4621      	mov	r1, r4
 80022ac:	f7ff f88f 	bl	80013ce <delay_s>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 820b 	beq.w	80026ce <task_test+0x66e>
			printf("err SENDING CPC_OFF\r\n");
 80022b8:	482d      	ldr	r0, [pc, #180]	; (8002370 <task_test+0x310>)
 80022ba:	f001 f86f 	bl	800339c <puts>
			printf("CONNECTION WITH PIR FAILD\r\n");
 80022be:	482d      	ldr	r0, [pc, #180]	; (8002374 <task_test+0x314>)
 80022c0:	f001 f86c 	bl	800339c <puts>
			st = 0;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <task_test+0x2d8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
}
 80022ca:	e200      	b.n	80026ce <task_test+0x66e>
	} else if (st == 4){
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <task_test+0x2d8>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d157      	bne.n	8002384 <task_test+0x324>
		if(delay_s(ts, 1)){
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <task_test+0x2e0>)
 80022d6:	cb18      	ldmia	r3, {r3, r4}
 80022d8:	2201      	movs	r2, #1
 80022da:	4618      	mov	r0, r3
 80022dc:	4621      	mov	r1, r4
 80022de:	f7ff f876 	bl	80013ce <delay_s>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 81f2 	beq.w	80026ce <task_test+0x66e>
			if(GPIO_ReadInputDataBit(ncPortArray[board_state()-1],ncPinArray[board_state()-1]) == ON){
 80022ea:	f7ff fc29 	bl	8001b40 <board_state>
 80022ee:	4603      	mov	r3, r0
 80022f0:	3b01      	subs	r3, #1
 80022f2:	4a21      	ldr	r2, [pc, #132]	; (8002378 <task_test+0x318>)
 80022f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80022f8:	f7ff fc22 	bl	8001b40 <board_state>
 80022fc:	4603      	mov	r3, r0
 80022fe:	3b01      	subs	r3, #1
 8002300:	4a1e      	ldr	r2, [pc, #120]	; (800237c <task_test+0x31c>)
 8002302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002306:	4619      	mov	r1, r3
 8002308:	4620      	mov	r0, r4
 800230a:	f7fe fc45 	bl	8000b98 <GPIO_ReadInputDataBit>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <task_test+0x2c4>
				printf("err CPC OFF\r\n");
 8002314:	481a      	ldr	r0, [pc, #104]	; (8002380 <task_test+0x320>)
 8002316:	f001 f841 	bl	800339c <puts>
				GPIO_WriteBit(COM_SWITCH_PORT,COM_SWITCH_PIN, OFF);
 800231a:	2200      	movs	r2, #0
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	4813      	ldr	r0, [pc, #76]	; (800236c <task_test+0x30c>)
 8002320:	f7fe fc53 	bl	8000bca <GPIO_WriteBit>
			TASK_STEP(5);
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <task_test+0x2d8>)
 8002326:	2205      	movs	r2, #5
 8002328:	701a      	strb	r2, [r3, #0]
}
 800232a:	e1d0      	b.n	80026ce <task_test+0x66e>
 800232c:	f3af 8000 	nop.w
 8002330:	5c28f5c3 	.word	0x5c28f5c3
 8002334:	3fe9c28f 	.word	0x3fe9c28f
 8002338:	20000178 	.word	0x20000178
 800233c:	20000179 	.word	0x20000179
 8002340:	20000180 	.word	0x20000180
 8002344:	20000157 	.word	0x20000157
 8002348:	20000152 	.word	0x20000152
 800234c:	080035e0 	.word	0x080035e0
 8002350:	20000464 	.word	0x20000464
 8002354:	20000188 	.word	0x20000188
 8002358:	20000460 	.word	0x20000460
 800235c:	2000046c 	.word	0x2000046c
 8002360:	2000019c 	.word	0x2000019c
 8002364:	080035f0 	.word	0x080035f0
 8002368:	08003600 	.word	0x08003600
 800236c:	40010c00 	.word	0x40010c00
 8002370:	08003610 	.word	0x08003610
 8002374:	08003518 	.word	0x08003518
 8002378:	20000024 	.word	0x20000024
 800237c:	20000014 	.word	0x20000014
 8002380:	08003628 	.word	0x08003628
	} else if(st == 5){
 8002384:	4bb6      	ldr	r3, [pc, #728]	; (8002660 <task_test+0x600>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d129      	bne.n	80023e0 <task_test+0x380>
		if(delay_s(ts, 1)){
 800238c:	4bb5      	ldr	r3, [pc, #724]	; (8002664 <task_test+0x604>)
 800238e:	cb18      	ldmia	r3, {r3, r4}
 8002390:	2201      	movs	r2, #1
 8002392:	4618      	mov	r0, r3
 8002394:	4621      	mov	r1, r4
 8002396:	f7ff f81a 	bl	80013ce <delay_s>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8196 	beq.w	80026ce <task_test+0x66e>
			if(GPIO_ReadInputDataBit(ncPortArray[board_state()-1],ncPinArray[board_state()-1]) == ON){
 80023a2:	f7ff fbcd 	bl	8001b40 <board_state>
 80023a6:	4603      	mov	r3, r0
 80023a8:	3b01      	subs	r3, #1
 80023aa:	4aaf      	ldr	r2, [pc, #700]	; (8002668 <task_test+0x608>)
 80023ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80023b0:	f7ff fbc6 	bl	8001b40 <board_state>
 80023b4:	4603      	mov	r3, r0
 80023b6:	3b01      	subs	r3, #1
 80023b8:	4aac      	ldr	r2, [pc, #688]	; (800266c <task_test+0x60c>)
 80023ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023be:	4619      	mov	r1, r3
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7fe fbe9 	bl	8000b98 <GPIO_ReadInputDataBit>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <task_test+0x372>
				printf("err CPC OFF\r\n");
 80023cc:	48a8      	ldr	r0, [pc, #672]	; (8002670 <task_test+0x610>)
 80023ce:	f000 ffe5 	bl	800339c <puts>
			TASK_STEP(6);
 80023d2:	4ba3      	ldr	r3, [pc, #652]	; (8002660 <task_test+0x600>)
 80023d4:	2206      	movs	r2, #6
 80023d6:	701a      	strb	r2, [r3, #0]
			cmd_req(CPC_ON);
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff fd3d 	bl	8001e58 <cmd_req>
}
 80023de:	e176      	b.n	80026ce <task_test+0x66e>
	} else if(st == 5){
 80023e0:	4b9f      	ldr	r3, [pc, #636]	; (8002660 <task_test+0x600>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d12e      	bne.n	8002446 <task_test+0x3e6>
		if (delay_s(ts, 1)  && fifo_empty(command_fifo_id)) {
 80023e8:	4b9e      	ldr	r3, [pc, #632]	; (8002664 <task_test+0x604>)
 80023ea:	cb18      	ldmia	r3, {r3, r4}
 80023ec:	2201      	movs	r2, #1
 80023ee:	4618      	mov	r0, r3
 80023f0:	4621      	mov	r1, r4
 80023f2:	f7fe ffec 	bl	80013ce <delay_s>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00f      	beq.n	800241c <task_test+0x3bc>
 80023fc:	4b9d      	ldr	r3, [pc, #628]	; (8002674 <task_test+0x614>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff f8df 	bl	80015c4 <fifo_empty>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <task_test+0x3bc>
			GPIO_WriteBit(COM_SWITCH_PORT,COM_SWITCH_PIN, ON);
 800240c:	2201      	movs	r2, #1
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	4899      	ldr	r0, [pc, #612]	; (8002678 <task_test+0x618>)
 8002412:	f7fe fbda 	bl	8000bca <GPIO_WriteBit>
			TASK_STEP(6);
 8002416:	4b92      	ldr	r3, [pc, #584]	; (8002660 <task_test+0x600>)
 8002418:	2206      	movs	r2, #6
 800241a:	701a      	strb	r2, [r3, #0]
		if (delay_s(ts, 3)) {
 800241c:	4b91      	ldr	r3, [pc, #580]	; (8002664 <task_test+0x604>)
 800241e:	cb18      	ldmia	r3, {r3, r4}
 8002420:	2203      	movs	r2, #3
 8002422:	4618      	mov	r0, r3
 8002424:	4621      	mov	r1, r4
 8002426:	f7fe ffd2 	bl	80013ce <delay_s>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 814e 	beq.w	80026ce <task_test+0x66e>
			printf("err SENDING CPC_ON\r\n");
 8002432:	4892      	ldr	r0, [pc, #584]	; (800267c <task_test+0x61c>)
 8002434:	f000 ffb2 	bl	800339c <puts>
			printf("CONNECTION WITH PIR FAILD\r\n");
 8002438:	4891      	ldr	r0, [pc, #580]	; (8002680 <task_test+0x620>)
 800243a:	f000 ffaf 	bl	800339c <puts>
			st = 0;
 800243e:	4b88      	ldr	r3, [pc, #544]	; (8002660 <task_test+0x600>)
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
}
 8002444:	e143      	b.n	80026ce <task_test+0x66e>
	} else if(st == 6) {
 8002446:	4b86      	ldr	r3, [pc, #536]	; (8002660 <task_test+0x600>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b06      	cmp	r3, #6
 800244c:	d12b      	bne.n	80024a6 <task_test+0x446>
		if(delay_s(ts, 1)){
 800244e:	4b85      	ldr	r3, [pc, #532]	; (8002664 <task_test+0x604>)
 8002450:	cb18      	ldmia	r3, {r3, r4}
 8002452:	2201      	movs	r2, #1
 8002454:	4618      	mov	r0, r3
 8002456:	4621      	mov	r1, r4
 8002458:	f7fe ffb9 	bl	80013ce <delay_s>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8135 	beq.w	80026ce <task_test+0x66e>
			if(GPIO_ReadInputDataBit(ncPortArray[board_state()-1],ncPinArray[board_state()-1]) == OFF){
 8002464:	f7ff fb6c 	bl	8001b40 <board_state>
 8002468:	4603      	mov	r3, r0
 800246a:	3b01      	subs	r3, #1
 800246c:	4a7e      	ldr	r2, [pc, #504]	; (8002668 <task_test+0x608>)
 800246e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002472:	f7ff fb65 	bl	8001b40 <board_state>
 8002476:	4603      	mov	r3, r0
 8002478:	3b01      	subs	r3, #1
 800247a:	4a7c      	ldr	r2, [pc, #496]	; (800266c <task_test+0x60c>)
 800247c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002480:	4619      	mov	r1, r3
 8002482:	4620      	mov	r0, r4
 8002484:	f7fe fb88 	bl	8000b98 <GPIO_ReadInputDataBit>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <task_test+0x434>
				printf("err CPC ON\r\n");
 800248e:	487d      	ldr	r0, [pc, #500]	; (8002684 <task_test+0x624>)
 8002490:	f000 ff84 	bl	800339c <puts>
			GPIO_WriteBit(COM_SWITCH_PORT,COM_SWITCH_PIN, OFF);
 8002494:	2200      	movs	r2, #0
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	4877      	ldr	r0, [pc, #476]	; (8002678 <task_test+0x618>)
 800249a:	f7fe fb96 	bl	8000bca <GPIO_WriteBit>
			TASK_STEP(7);
 800249e:	4b70      	ldr	r3, [pc, #448]	; (8002660 <task_test+0x600>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	701a      	strb	r2, [r3, #0]
}
 80024a4:	e113      	b.n	80026ce <task_test+0x66e>
	} else if(st == 7){
 80024a6:	4b6e      	ldr	r3, [pc, #440]	; (8002660 <task_test+0x600>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b07      	cmp	r3, #7
 80024ac:	d129      	bne.n	8002502 <task_test+0x4a2>
		if(delay_s(ts,1)){
 80024ae:	4b6d      	ldr	r3, [pc, #436]	; (8002664 <task_test+0x604>)
 80024b0:	cb18      	ldmia	r3, {r3, r4}
 80024b2:	2201      	movs	r2, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	4621      	mov	r1, r4
 80024b8:	f7fe ff89 	bl	80013ce <delay_s>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8105 	beq.w	80026ce <task_test+0x66e>
			if(GPIO_ReadInputDataBit(ncPortArray[board_state()-1],ncPinArray[board_state()-1]) == ON){
 80024c4:	f7ff fb3c 	bl	8001b40 <board_state>
 80024c8:	4603      	mov	r3, r0
 80024ca:	3b01      	subs	r3, #1
 80024cc:	4a66      	ldr	r2, [pc, #408]	; (8002668 <task_test+0x608>)
 80024ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80024d2:	f7ff fb35 	bl	8001b40 <board_state>
 80024d6:	4603      	mov	r3, r0
 80024d8:	3b01      	subs	r3, #1
 80024da:	4a64      	ldr	r2, [pc, #400]	; (800266c <task_test+0x60c>)
 80024dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4620      	mov	r0, r4
 80024e4:	f7fe fb58 	bl	8000b98 <GPIO_ReadInputDataBit>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <task_test+0x494>
				printf("err CPC ON\r\n");
 80024ee:	4865      	ldr	r0, [pc, #404]	; (8002684 <task_test+0x624>)
 80024f0:	f000 ff54 	bl	800339c <puts>
			TASK_STEP(8);
 80024f4:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <task_test+0x600>)
 80024f6:	2208      	movs	r2, #8
 80024f8:	701a      	strb	r2, [r3, #0]
			printf("CPC-FIN\r\n");
 80024fa:	4863      	ldr	r0, [pc, #396]	; (8002688 <task_test+0x628>)
 80024fc:	f000 ff4e 	bl	800339c <puts>
}
 8002500:	e0e5      	b.n	80026ce <task_test+0x66e>
	}  else if (st == 8){
 8002502:	4b57      	ldr	r3, [pc, #348]	; (8002660 <task_test+0x600>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b08      	cmp	r3, #8
 8002508:	d172      	bne.n	80025f0 <task_test+0x590>
		adc_temp[PIR_SENSOR_ADC] += adc_mng_value(sensor_adc);
 800250a:	4b60      	ldr	r3, [pc, #384]	; (800268c <task_test+0x62c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fe59 	bl	80011c8 <adc_mng_value>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <task_test+0x630>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4413      	add	r3, r2
 8002520:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <task_test+0x630>)
 8002522:	60d3      	str	r3, [r2, #12]
		adc_temp[PIR_CAP_ADC] += adc_mng_value(cap_adc);
 8002524:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <task_test+0x634>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fe4c 	bl	80011c8 <adc_mng_value>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	4b56      	ldr	r3, [pc, #344]	; (8002690 <task_test+0x630>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	4413      	add	r3, r2
 800253a:	4a55      	ldr	r2, [pc, #340]	; (8002690 <task_test+0x630>)
 800253c:	6113      	str	r3, [r2, #16]
		N++;
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <task_test+0x638>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	4a54      	ldr	r2, [pc, #336]	; (8002698 <task_test+0x638>)
 8002546:	6013      	str	r3, [r2, #0]
		if(delay_s(ts,15)){
 8002548:	4b46      	ldr	r3, [pc, #280]	; (8002664 <task_test+0x604>)
 800254a:	cb18      	ldmia	r3, {r3, r4}
 800254c:	220f      	movs	r2, #15
 800254e:	4618      	mov	r0, r3
 8002550:	4621      	mov	r1, r4
 8002552:	f7fe ff3c 	bl	80013ce <delay_s>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80b8 	beq.w	80026ce <task_test+0x66e>
			adc_temp[PIR_SENSOR_ADC] /= N;
 800255e:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <task_test+0x630>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	4a4d      	ldr	r2, [pc, #308]	; (8002698 <task_test+0x638>)
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	fbb3 f3f2 	udiv	r3, r3, r2
 800256a:	4a49      	ldr	r2, [pc, #292]	; (8002690 <task_test+0x630>)
 800256c:	60d3      	str	r3, [r2, #12]
			adc_temp[PIR_CAP_ADC] /= N;
 800256e:	4b48      	ldr	r3, [pc, #288]	; (8002690 <task_test+0x630>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	4a49      	ldr	r2, [pc, #292]	; (8002698 <task_test+0x638>)
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	fbb3 f3f2 	udiv	r3, r3, r2
 800257a:	4a45      	ldr	r2, [pc, #276]	; (8002690 <task_test+0x630>)
 800257c:	6113      	str	r3, [r2, #16]
			N = 0;
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <task_test+0x638>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
			printf("SENSOR VOLTAGE: %d\r\n", (uint16_t)(adc_temp[PIR_SENSOR_ADC] * 0.805));
 8002584:	4b42      	ldr	r3, [pc, #264]	; (8002690 <task_test+0x630>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ffa1 	bl	80004d0 <__aeabi_ui2d>
 800258e:	a332      	add	r3, pc, #200	; (adr r3, 8002658 <task_test+0x5f8>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	f7fe f812 	bl	80005bc <__aeabi_dmul>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	4618      	mov	r0, r3
 800259e:	4621      	mov	r1, r4
 80025a0:	f7fe fa1e 	bl	80009e0 <__aeabi_d2uiz>
 80025a4:	4603      	mov	r3, r0
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4619      	mov	r1, r3
 80025aa:	483c      	ldr	r0, [pc, #240]	; (800269c <task_test+0x63c>)
 80025ac:	f000 feac 	bl	8003308 <iprintf>
			printf("CAP VOLTAGE: %d\r\n", (uint16_t)(adc_temp[PIR_CAP_ADC] * 0.805));
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <task_test+0x630>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ff8b 	bl	80004d0 <__aeabi_ui2d>
 80025ba:	a327      	add	r3, pc, #156	; (adr r3, 8002658 <task_test+0x5f8>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fd fffc 	bl	80005bc <__aeabi_dmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	4618      	mov	r0, r3
 80025ca:	4621      	mov	r1, r4
 80025cc:	f7fe fa08 	bl	80009e0 <__aeabi_d2uiz>
 80025d0:	4603      	mov	r3, r0
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	4832      	ldr	r0, [pc, #200]	; (80026a0 <task_test+0x640>)
 80025d8:	f000 fe96 	bl	8003308 <iprintf>
			cmd_req(NONE);
 80025dc:	2002      	movs	r0, #2
 80025de:	f7ff fc3b 	bl	8001e58 <cmd_req>
			st++;
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <task_test+0x600>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <task_test+0x600>)
 80025ec:	701a      	strb	r2, [r3, #0]
}
 80025ee:	e06e      	b.n	80026ce <task_test+0x66e>
	} else if (st == 9){
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <task_test+0x600>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	d160      	bne.n	80026ba <task_test+0x65a>
		if(delay_s(ts,10)){
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <task_test+0x604>)
 80025fa:	cb18      	ldmia	r3, {r3, r4}
 80025fc:	220a      	movs	r2, #10
 80025fe:	4618      	mov	r0, r3
 8002600:	4621      	mov	r1, r4
 8002602:	f7fe fee4 	bl	80013ce <delay_s>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <task_test+0x5b8>
			printf("err RESIVIENG DATA FORM PIR\r\n");
 800260c:	4825      	ldr	r0, [pc, #148]	; (80026a4 <task_test+0x644>)
 800260e:	f000 fec5 	bl	800339c <puts>
			st = 0;
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <task_test+0x600>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
		if(delay_s(ts,2) && fifo_empty(command_fifo_id)){
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <task_test+0x604>)
 800261a:	cb18      	ldmia	r3, {r3, r4}
 800261c:	2202      	movs	r2, #2
 800261e:	4618      	mov	r0, r3
 8002620:	4621      	mov	r1, r4
 8002622:	f7fe fed4 	bl	80013ce <delay_s>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d050      	beq.n	80026ce <task_test+0x66e>
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <task_test+0x614>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe ffc7 	bl	80015c4 <fifo_empty>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d048      	beq.n	80026ce <task_test+0x66e>
			if(PirHealth[PIR_SENSOR_READY] && PirHealth[PIR_TEMP_READY]){
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <task_test+0x648>)
 800263e:	88db      	ldrh	r3, [r3, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d033      	beq.n	80026ac <task_test+0x64c>
 8002644:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <task_test+0x648>)
 8002646:	891b      	ldrh	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d02f      	beq.n	80026ac <task_test+0x64c>
				TASK_STEP(10);
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <task_test+0x600>)
 800264e:	220a      	movs	r2, #10
 8002650:	701a      	strb	r2, [r3, #0]
}
 8002652:	e03c      	b.n	80026ce <task_test+0x66e>
 8002654:	f3af 8000 	nop.w
 8002658:	5c28f5c3 	.word	0x5c28f5c3
 800265c:	3fe9c28f 	.word	0x3fe9c28f
 8002660:	20000178 	.word	0x20000178
 8002664:	20000180 	.word	0x20000180
 8002668:	20000024 	.word	0x20000024
 800266c:	20000014 	.word	0x20000014
 8002670:	08003628 	.word	0x08003628
 8002674:	20000157 	.word	0x20000157
 8002678:	40010c00 	.word	0x40010c00
 800267c:	08003638 	.word	0x08003638
 8002680:	08003518 	.word	0x08003518
 8002684:	0800364c 	.word	0x0800364c
 8002688:	08003658 	.word	0x08003658
 800268c:	20000468 	.word	0x20000468
 8002690:	20000188 	.word	0x20000188
 8002694:	20000470 	.word	0x20000470
 8002698:	2000019c 	.word	0x2000019c
 800269c:	08003664 	.word	0x08003664
 80026a0:	0800367c 	.word	0x0800367c
 80026a4:	08003690 	.word	0x08003690
 80026a8:	200000fc 	.word	0x200000fc
				printf("WAIT FOR READLY\r\n");
 80026ac:	480a      	ldr	r0, [pc, #40]	; (80026d8 <task_test+0x678>)
 80026ae:	f000 fe75 	bl	800339c <puts>
				st = 8;
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <task_test+0x67c>)
 80026b4:	2208      	movs	r2, #8
 80026b6:	701a      	strb	r2, [r3, #0]
}
 80026b8:	e009      	b.n	80026ce <task_test+0x66e>
	} else if (st == 10) {
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <task_test+0x67c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b0a      	cmp	r3, #10
 80026c0:	d105      	bne.n	80026ce <task_test+0x66e>
			printf("TEST-FIN\r\n");
 80026c2:	4807      	ldr	r0, [pc, #28]	; (80026e0 <task_test+0x680>)
 80026c4:	f000 fe6a 	bl	800339c <puts>
			TASK_STEP(0);
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <task_test+0x67c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	080036b0 	.word	0x080036b0
 80026dc:	20000178 	.word	0x20000178
 80026e0:	080036c4 	.word	0x080036c4

080026e4 <task_init>:

void task_init(){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	command_fifo_id = fifo_req(command_fifo, 1, 10, "Command Fifo");
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <task_init+0x28>)
 80026ea:	220a      	movs	r2, #10
 80026ec:	2101      	movs	r1, #1
 80026ee:	4808      	ldr	r0, [pc, #32]	; (8002710 <task_init+0x2c>)
 80026f0:	f7fe fe8e 	bl	8001410 <fifo_req>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <task_init+0x30>)
 80026fa:	701a      	strb	r2, [r3, #0]
	fifo_clear(command_fifo_id);
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <task_init+0x30>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fff5 	bl	80016f0 <fifo_clear>

}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	080036d0 	.word	0x080036d0
 8002710:	200004d8 	.word	0x200004d8
 8002714:	20000157 	.word	0x20000157

08002718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002750 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800271c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800271e:	e003      	b.n	8002728 <LoopCopyDataInit>

08002720 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002722:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002724:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002726:	3104      	adds	r1, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002728:	480b      	ldr	r0, [pc, #44]	; (8002758 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800272c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800272e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002730:	d3f6      	bcc.n	8002720 <CopyDataInit>
	ldr	r2, =_sbss
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002734:	e002      	b.n	800273c <LoopFillZerobss>

08002736 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002736:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002738:	f842 3b04 	str.w	r3, [r2], #4

0800273c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800273e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002740:	d3f9      	bcc.n	8002736 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002742:	f000 fb2f 	bl	8002da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002746:	f000 fe55 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800274a:	f7fe fff3 	bl	8001734 <main>
	bx	lr
 800274e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002750:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002754:	08003708 	.word	0x08003708
	ldr	r0, =_sdata
 8002758:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800275c:	20000058 	.word	0x20000058
	ldr	r2, =_sbss
 8002760:	20000058 	.word	0x20000058
	ldr	r3, = _ebss
 8002764:	200004e4 	.word	0x200004e4

08002768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC1_2_IRQHandler>

0800276a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800277a:	e7fe      	b.n	800277a <HardFault_Handler+0x4>

0800277c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002780:	e7fe      	b.n	8002780 <MemManage_Handler+0x4>

08002782 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002786:	e7fe      	b.n	8002786 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800278c:	e7fe      	b.n	800278c <UsageFault_Handler+0x4>

0800278e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

extern void debugc(char _c);
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e009      	b.n	80027d8 <_write+0x26>
		debugc(ptr[i]);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4413      	add	r3, r2
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f9b5 	bl	8002b3c <debugc>
	for (int i = 0; i < len; i++) {
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3301      	adds	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	dbf1      	blt.n	80027c4 <_write+0x12>
	}
	/* Implement your write code here, this is used by puts and printf for example */
	return len;
 80027e0:	687b      	ldr	r3, [r7, #4]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <NVIC_EnableIRQ+0x2c>)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	79fa      	ldrb	r2, [r7, #7]
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2001      	movs	r0, #1
 8002806:	fa00 f202 	lsl.w	r2, r0, r2
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100

0800281c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	da0b      	bge.n	8002848 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002830:	490d      	ldr	r1, [pc, #52]	; (8002868 <NVIC_SetPriority+0x4c>)
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	3b04      	subs	r3, #4
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	440b      	add	r3, r1
 8002844:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002846:	e009      	b.n	800285c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002848:	4908      	ldr	r1, [pc, #32]	; (800286c <NVIC_SetPriority+0x50>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	440b      	add	r3, r1
 8002858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000ed00 	.word	0xe000ed00
 800286c:	e000e100 	.word	0xe000e100

08002870 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287e:	d301      	bcc.n	8002884 <SysTick_Config+0x14>
 8002880:	2301      	movs	r3, #1
 8002882:	e011      	b.n	80028a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <SysTick_Config+0x40>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800288c:	3b01      	subs	r3, #1
 800288e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8002890:	210f      	movs	r1, #15
 8002892:	f04f 30ff 	mov.w	r0, #4294967295
 8002896:	f7ff ffc1 	bl	800281c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <SysTick_Config+0x40>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <SysTick_Config+0x40>)
 80028a2:	2207      	movs	r2, #7
 80028a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <power_selection_pin_init>:
#include <def.h>
#include <system_init.h>

void power_selection_pin_init(){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef PSP;
	//BOARD 1
	PSP.GPIO_Speed = GPIO_Speed_50MHz;
 80028ba:	2303      	movs	r3, #3
 80028bc:	71bb      	strb	r3, [r7, #6]
	PSP.GPIO_Mode = GPIO_Mode_Out_PP;
 80028be:	2310      	movs	r3, #16
 80028c0:	71fb      	strb	r3, [r7, #7]
	PSP.GPIO_Pin = POWER_1_PIN;
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(POWER_SELECTION_PORT, &PSP);
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	481f      	ldr	r0, [pc, #124]	; (8002948 <power_selection_pin_init+0x94>)
 80028cc:	f7fe f8a8 	bl	8000a20 <GPIO_Init>
	//BOARD2
	PSP.GPIO_Pin = POWER_2_PIN;
 80028d0:	2340      	movs	r3, #64	; 0x40
 80028d2:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(POWER_SELECTION_PORT, &PSP);
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	481b      	ldr	r0, [pc, #108]	; (8002948 <power_selection_pin_init+0x94>)
 80028da:	f7fe f8a1 	bl	8000a20 <GPIO_Init>

	//BOARD3
	PSP.GPIO_Pin = POWER_3_PIN;
 80028de:	2320      	movs	r3, #32
 80028e0:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(POWER_SELECTION_PORT, &PSP);
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4818      	ldr	r0, [pc, #96]	; (8002948 <power_selection_pin_init+0x94>)
 80028e8:	f7fe f89a 	bl	8000a20 <GPIO_Init>

	//BOARD4
	PSP.GPIO_Pin = POWER_4_PIN;
 80028ec:	2310      	movs	r3, #16
 80028ee:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(POWER_SELECTION_PORT, &PSP);
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	4619      	mov	r1, r3
 80028f4:	4814      	ldr	r0, [pc, #80]	; (8002948 <power_selection_pin_init+0x94>)
 80028f6:	f7fe f893 	bl	8000a20 <GPIO_Init>

	//BOARD5
	PSP.GPIO_Pin = POWER_5_PIN;
 80028fa:	2308      	movs	r3, #8
 80028fc:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(POWER_SELECTION_PORT, &PSP);
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4811      	ldr	r0, [pc, #68]	; (8002948 <power_selection_pin_init+0x94>)
 8002904:	f7fe f88c 	bl	8000a20 <GPIO_Init>

	//BOARD6
	PSP.GPIO_Pin = POWER_6_PIN;
 8002908:	2304      	movs	r3, #4
 800290a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(POWER_SELECTION_PORT, &PSP);
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	4619      	mov	r1, r3
 8002910:	480d      	ldr	r0, [pc, #52]	; (8002948 <power_selection_pin_init+0x94>)
 8002912:	f7fe f885 	bl	8000a20 <GPIO_Init>

	//BOARD7
	PSP.GPIO_Pin = POWER_7_PIN;
 8002916:	2302      	movs	r3, #2
 8002918:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(POWER_SELECTION_PORT, &PSP);
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	4619      	mov	r1, r3
 800291e:	480a      	ldr	r0, [pc, #40]	; (8002948 <power_selection_pin_init+0x94>)
 8002920:	f7fe f87e 	bl	8000a20 <GPIO_Init>

	//BOARD8
	PSP.GPIO_Pin = POWER_8_PIN;
 8002924:	2301      	movs	r3, #1
 8002926:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(POWER_SELECTION_PORT, &PSP);
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	4619      	mov	r1, r3
 800292c:	4806      	ldr	r0, [pc, #24]	; (8002948 <power_selection_pin_init+0x94>)
 800292e:	f7fe f877 	bl	8000a20 <GPIO_Init>

	//com
	PSP.GPIO_Pin = COM_SWITCH_PIN;
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(COM_SWITCH_PORT, &PSP);
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4804      	ldr	r0, [pc, #16]	; (800294c <power_selection_pin_init+0x98>)
 800293c:	f7fe f870 	bl	8000a20 <GPIO_Init>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40010800 	.word	0x40010800
 800294c:	40010c00 	.word	0x40010c00

08002950 <mux_pin_init>:

void mux_pin_init()
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef MP;
	MP.GPIO_Speed = GPIO_Speed_10MHz;
 8002956:	2301      	movs	r3, #1
 8002958:	71bb      	strb	r3, [r7, #6]
	MP.GPIO_Mode = GPIO_Mode_Out_PP;
 800295a:	2310      	movs	r3, #16
 800295c:	71fb      	strb	r3, [r7, #7]
	MP.GPIO_Pin = MUX_0_PIN;
 800295e:	2340      	movs	r3, #64	; 0x40
 8002960:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(MUX_0_PORT, &MP);
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	4619      	mov	r1, r3
 8002966:	480e      	ldr	r0, [pc, #56]	; (80029a0 <mux_pin_init+0x50>)
 8002968:	f7fe f85a 	bl	8000a20 <GPIO_Init>

	MP.GPIO_Pin = MUX_1_PIN;
 800296c:	2320      	movs	r3, #32
 800296e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(MUX_2_PORT, &MP);
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	4619      	mov	r1, r3
 8002974:	480b      	ldr	r0, [pc, #44]	; (80029a4 <mux_pin_init+0x54>)
 8002976:	f7fe f853 	bl	8000a20 <GPIO_Init>

	MP.GPIO_Pin = MUX_2_PIN;
 800297a:	2304      	movs	r3, #4
 800297c:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(MUX_2_PORT, &MP);
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	4619      	mov	r1, r3
 8002982:	4808      	ldr	r0, [pc, #32]	; (80029a4 <mux_pin_init+0x54>)
 8002984:	f7fe f84c 	bl	8000a20 <GPIO_Init>

	MP.GPIO_Pin = MUX_EN_PIN;
 8002988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298c:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(MUX_EN_PORT, &MP);
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4805      	ldr	r0, [pc, #20]	; (80029a8 <mux_pin_init+0x58>)
 8002994:	f7fe f844 	bl	8000a20 <GPIO_Init>

}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010c00 	.word	0x40010c00
 80029a4:	40011400 	.word	0x40011400
 80029a8:	40011000 	.word	0x40011000

080029ac <nc_pin_init>:

void nc_pin_init()
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 	NC;

	NC.GPIO_Speed = GPIO_Speed_10MHz;
 80029b2:	2301      	movs	r3, #1
 80029b4:	71bb      	strb	r3, [r7, #6]
	NC.GPIO_Mode = GPIO_Mode_IPU;             //pull-up input
 80029b6:	2348      	movs	r3, #72	; 0x48
 80029b8:	71fb      	strb	r3, [r7, #7]
	NC.GPIO_Pin = M_NC_1_PIN;
 80029ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029be:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(M_NC_1_PORT, &NC);
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	481e      	ldr	r0, [pc, #120]	; (8002a40 <nc_pin_init+0x94>)
 80029c6:	f7fe f82b 	bl	8000a20 <GPIO_Init>

	NC.GPIO_Pin = M_NC_2_PIN;
 80029ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ce:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(M_NC_2_PORT, &NC);
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	4619      	mov	r1, r3
 80029d4:	481a      	ldr	r0, [pc, #104]	; (8002a40 <nc_pin_init+0x94>)
 80029d6:	f7fe f823 	bl	8000a20 <GPIO_Init>

	NC.GPIO_Pin = M_NC_3_PIN;
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(M_NC_3_PORT, &NC);
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4817      	ldr	r0, [pc, #92]	; (8002a40 <nc_pin_init+0x94>)
 80029e4:	f7fe f81c 	bl	8000a20 <GPIO_Init>

	NC.GPIO_Pin = M_NC_4_PIN;
 80029e8:	2340      	movs	r3, #64	; 0x40
 80029ea:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(M_NC_4_PORT, &NC);
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4813      	ldr	r0, [pc, #76]	; (8002a40 <nc_pin_init+0x94>)
 80029f2:	f7fe f815 	bl	8000a20 <GPIO_Init>

	NC.GPIO_Pin = M_NC_5_PIN;
 80029f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029fa:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(M_NC_5_PORT, &NC);
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4810      	ldr	r0, [pc, #64]	; (8002a44 <nc_pin_init+0x98>)
 8002a02:	f7fe f80d 	bl	8000a20 <GPIO_Init>


	NC.GPIO_Pin = M_NC_6_PIN;
 8002a06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a0a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(M_NC_6_PORT, &NC);
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	480c      	ldr	r0, [pc, #48]	; (8002a44 <nc_pin_init+0x98>)
 8002a12:	f7fe f805 	bl	8000a20 <GPIO_Init>

	NC.GPIO_Pin = M_NC_7_PIN;
 8002a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a1a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(M_NC_7_PORT, &NC);
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4808      	ldr	r0, [pc, #32]	; (8002a44 <nc_pin_init+0x98>)
 8002a22:	f7fd fffd 	bl	8000a20 <GPIO_Init>

	NC.GPIO_Pin = M_NC_8_PIN;
 8002a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(M_NC_8_PORT, &NC);
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4804      	ldr	r0, [pc, #16]	; (8002a44 <nc_pin_init+0x98>)
 8002a32:	f7fd fff5 	bl	8000a20 <GPIO_Init>

}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40011000 	.word	0x40011000
 8002a44:	40010c00 	.word	0x40010c00

08002a48 <debug_init>:



void debug_init() {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gp;
	gp.GPIO_Speed = GPIO_Speed_50MHz;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	75bb      	strb	r3, [r7, #22]
	gp.GPIO_Mode = GPIO_Mode_AF_PP;
 8002a52:	2318      	movs	r3, #24
 8002a54:	75fb      	strb	r3, [r7, #23]
	gp.GPIO_Pin =  TX_PIN;
 8002a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5a:	82bb      	strh	r3, [r7, #20]
	GPIO_Init(TX_PORT, &gp);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	4831      	ldr	r0, [pc, #196]	; (8002b28 <debug_init+0xe0>)
 8002a64:	f7fd ffdc 	bl	8000a20 <GPIO_Init>
	gp.GPIO_Pin =  DBG_TX_PIN;
 8002a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a6c:	82bb      	strh	r3, [r7, #20]
	GPIO_Init(DBG_TX_PORT, &gp);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	482d      	ldr	r0, [pc, #180]	; (8002b2c <debug_init+0xe4>)
 8002a76:	f7fd ffd3 	bl	8000a20 <GPIO_Init>

	gp.GPIO_Mode = GPIO_Mode_IPU;
 8002a7a:	2348      	movs	r3, #72	; 0x48
 8002a7c:	75fb      	strb	r3, [r7, #23]
	gp.GPIO_Pin =  RX_PIN;
 8002a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a82:	82bb      	strh	r3, [r7, #20]
	GPIO_Init(RX_PORT, &gp);
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4827      	ldr	r0, [pc, #156]	; (8002b28 <debug_init+0xe0>)
 8002a8c:	f7fd ffc8 	bl	8000a20 <GPIO_Init>
	gp.GPIO_Pin =  DBG_RX_PIN;
 8002a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a94:	82bb      	strh	r3, [r7, #20]
	GPIO_Init(DBG_RX_PORT, &gp);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4823      	ldr	r0, [pc, #140]	; (8002b2c <debug_init+0xe4>)
 8002a9e:	f7fd ffbf 	bl	8000a20 <GPIO_Init>
	GPIO_WriteBit(RX_PORT,RX_PIN,1);
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002aa8:	481f      	ldr	r0, [pc, #124]	; (8002b28 <debug_init+0xe0>)
 8002aaa:	f7fe f88e 	bl	8000bca <GPIO_WriteBit>
	GPIO_WriteBit(DBG_RX_PORT,DBG_RX_PIN,1);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab4:	481d      	ldr	r0, [pc, #116]	; (8002b2c <debug_init+0xe4>)
 8002ab6:	f7fe f888 	bl	8000bca <GPIO_WriteBit>

	USART_InitTypeDef ug;

	ug.USART_BaudRate =  230400;
 8002aba:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8002abe:	607b      	str	r3, [r7, #4]
	ug.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	823b      	strh	r3, [r7, #16]
	ug.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	81fb      	strh	r3, [r7, #14]
	ug.USART_Parity = USART_Parity_No;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	81bb      	strh	r3, [r7, #12]
	ug.USART_StopBits = USART_StopBits_1;
 8002acc:	2300      	movs	r3, #0
 8002ace:	817b      	strh	r3, [r7, #10]
	ug.USART_WordLength = USART_WordLength_8b;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	813b      	strh	r3, [r7, #8]

	USART_Init(USART1, &ug);
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4815      	ldr	r0, [pc, #84]	; (8002b30 <debug_init+0xe8>)
 8002ada:	f7fe f979 	bl	8000dd0 <USART_Init>
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f240 5125 	movw	r1, #1317	; 0x525
 8002ae4:	4812      	ldr	r0, [pc, #72]	; (8002b30 <debug_init+0xe8>)
 8002ae6:	f7fe fa4c 	bl	8000f82 <USART_ITConfig>

	ug.USART_BaudRate =125000;
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <debug_init+0xec>)
 8002aec:	607b      	str	r3, [r7, #4]
	USART_Init(USART3, &ug);
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4811      	ldr	r0, [pc, #68]	; (8002b38 <debug_init+0xf0>)
 8002af4:	f7fe f96c 	bl	8000dd0 <USART_Init>
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8002af8:	2201      	movs	r2, #1
 8002afa:	f240 5125 	movw	r1, #1317	; 0x525
 8002afe:	480e      	ldr	r0, [pc, #56]	; (8002b38 <debug_init+0xf0>)
 8002b00:	f7fe fa3f 	bl	8000f82 <USART_ITConfig>

	USART_Cmd(USART3, ENABLE);
 8002b04:	2101      	movs	r1, #1
 8002b06:	480c      	ldr	r0, [pc, #48]	; (8002b38 <debug_init+0xf0>)
 8002b08:	f7fe fa1c 	bl	8000f44 <USART_Cmd>
	USART_Cmd(USART1, ENABLE);
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4808      	ldr	r0, [pc, #32]	; (8002b30 <debug_init+0xe8>)
 8002b10:	f7fe fa18 	bl	8000f44 <USART_Cmd>

	NVIC_EnableIRQ(USART1_IRQn);
 8002b14:	2025      	movs	r0, #37	; 0x25
 8002b16:	f7ff fe69 	bl	80027ec <NVIC_EnableIRQ>
	NVIC_EnableIRQ(USART3_IRQn);
 8002b1a:	2027      	movs	r0, #39	; 0x27
 8002b1c:	f7ff fe66 	bl	80027ec <NVIC_EnableIRQ>
}
 8002b20:	bf00      	nop
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40011000 	.word	0x40011000
 8002b2c:	40010800 	.word	0x40010800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	0001e848 	.word	0x0001e848
 8002b38:	40004800 	.word	0x40004800

08002b3c <debugc>:

void debugc(char _c) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
	USART_SendData(USART1, _c);
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4807      	ldr	r0, [pc, #28]	; (8002b6c <debugc+0x30>)
 8002b4e:	f7fe fa5f 	bl	8001010 <USART_SendData>
	while (!USART_GetFlagStatus(USART1, USART_FLAG_TXE));
 8002b52:	bf00      	nop
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <debugc+0x30>)
 8002b58:	f7fe fa7a 	bl	8001050 <USART_GetFlagStatus>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f8      	beq.n	8002b54 <debugc+0x18>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40013800 	.word	0x40013800

08002b70 <tester_adc_init>:
	for (int i = 0; _str[i] != '\0'; i++) {
		debugc(_str[i]);
	}
}

void tester_adc_init(){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
	static GPIO_InitTypeDef gp;
	gp.GPIO_Mode = GPIO_Mode_AIN;
 8002b74:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <tester_adc_init+0xf4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	70da      	strb	r2, [r3, #3]
	gp.GPIO_Speed = GPIO_Speed_10MHz;
 8002b7a:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <tester_adc_init+0xf4>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	709a      	strb	r2, [r3, #2]

	gp.GPIO_Pin = ADC_SENSOR_PIN;
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <tester_adc_init+0xf4>)
 8002b82:	2202      	movs	r2, #2
 8002b84:	801a      	strh	r2, [r3, #0]
	GPIO_Init( ADC_SENSOR_PORT, &gp);
 8002b86:	4937      	ldr	r1, [pc, #220]	; (8002c64 <tester_adc_init+0xf4>)
 8002b88:	4837      	ldr	r0, [pc, #220]	; (8002c68 <tester_adc_init+0xf8>)
 8002b8a:	f7fd ff49 	bl	8000a20 <GPIO_Init>
	GPIO_WriteBit( ADC_SENSOR_PORT, ADC_SENSOR_PIN, false);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2102      	movs	r1, #2
 8002b92:	4835      	ldr	r0, [pc, #212]	; (8002c68 <tester_adc_init+0xf8>)
 8002b94:	f7fe f819 	bl	8000bca <GPIO_WriteBit>

	gp.GPIO_Pin = ADC_NTC_PIN	;
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <tester_adc_init+0xf4>)
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	801a      	strh	r2, [r3, #0]
	GPIO_Init(ADC_NTC_PORT, &gp);
 8002b9e:	4931      	ldr	r1, [pc, #196]	; (8002c64 <tester_adc_init+0xf4>)
 8002ba0:	4831      	ldr	r0, [pc, #196]	; (8002c68 <tester_adc_init+0xf8>)
 8002ba2:	f7fd ff3d 	bl	8000a20 <GPIO_Init>
	GPIO_WriteBit(ADC_NTC_PORT, ADC_NTC_PIN	, false);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2104      	movs	r1, #4
 8002baa:	482f      	ldr	r0, [pc, #188]	; (8002c68 <tester_adc_init+0xf8>)
 8002bac:	f7fe f80d 	bl	8000bca <GPIO_WriteBit>

	gp.GPIO_Pin = ADC_CAP_PIN;
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <tester_adc_init+0xf4>)
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	801a      	strh	r2, [r3, #0]
	GPIO_Init(ADC_CAP_PORT, &gp);
 8002bb6:	492b      	ldr	r1, [pc, #172]	; (8002c64 <tester_adc_init+0xf4>)
 8002bb8:	482b      	ldr	r0, [pc, #172]	; (8002c68 <tester_adc_init+0xf8>)
 8002bba:	f7fd ff31 	bl	8000a20 <GPIO_Init>
	GPIO_WriteBit(ADC_CAP_PORT, ADC_CAP_PIN, false);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2108      	movs	r1, #8
 8002bc2:	4829      	ldr	r0, [pc, #164]	; (8002c68 <tester_adc_init+0xf8>)
 8002bc4:	f7fe f801 	bl	8000bca <GPIO_WriteBit>

	gp.GPIO_Pin = A_POWER_1_PIN;
 8002bc8:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <tester_adc_init+0xf4>)
 8002bca:	2210      	movs	r2, #16
 8002bcc:	801a      	strh	r2, [r3, #0]
	GPIO_Init(A_POWER_1_PORT, &gp);
 8002bce:	4925      	ldr	r1, [pc, #148]	; (8002c64 <tester_adc_init+0xf4>)
 8002bd0:	4825      	ldr	r0, [pc, #148]	; (8002c68 <tester_adc_init+0xf8>)
 8002bd2:	f7fd ff25 	bl	8000a20 <GPIO_Init>
	GPIO_WriteBit(A_POWER_1_PORT, A_POWER_1_PIN, false);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2110      	movs	r1, #16
 8002bda:	4823      	ldr	r0, [pc, #140]	; (8002c68 <tester_adc_init+0xf8>)
 8002bdc:	f7fd fff5 	bl	8000bca <GPIO_WriteBit>

	gp.GPIO_Pin = A_POWER_2_PIN;
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <tester_adc_init+0xf4>)
 8002be2:	2220      	movs	r2, #32
 8002be4:	801a      	strh	r2, [r3, #0]
	GPIO_Init(A_POWER_2_PORT, &gp);
 8002be6:	491f      	ldr	r1, [pc, #124]	; (8002c64 <tester_adc_init+0xf4>)
 8002be8:	481f      	ldr	r0, [pc, #124]	; (8002c68 <tester_adc_init+0xf8>)
 8002bea:	f7fd ff19 	bl	8000a20 <GPIO_Init>
	GPIO_WriteBit(A_POWER_2_PORT, A_POWER_2_PIN, false);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2120      	movs	r1, #32
 8002bf2:	481d      	ldr	r0, [pc, #116]	; (8002c68 <tester_adc_init+0xf8>)
 8002bf4:	f7fd ffe9 	bl	8000bca <GPIO_WriteBit>

	gp.GPIO_Pin = POWER_PIN;
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <tester_adc_init+0xf4>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	801a      	strh	r2, [r3, #0]
	GPIO_Init(POWER_PORT, &gp);
 8002bfe:	4919      	ldr	r1, [pc, #100]	; (8002c64 <tester_adc_init+0xf4>)
 8002c00:	4819      	ldr	r0, [pc, #100]	; (8002c68 <tester_adc_init+0xf8>)
 8002c02:	f7fd ff0d 	bl	8000a20 <GPIO_Init>
	GPIO_WriteBit(POWER_PORT, POWER_PIN, false);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4817      	ldr	r0, [pc, #92]	; (8002c68 <tester_adc_init+0xf8>)
 8002c0c:	f7fd ffdd 	bl	8000bca <GPIO_WriteBit>

	adc_init(ADC1);
 8002c10:	4816      	ldr	r0, [pc, #88]	; (8002c6c <tester_adc_init+0xfc>)
 8002c12:	f7fe fa76 	bl	8001102 <adc_init>
	adc_mng_init();
 8002c16:	f7fe facb 	bl	80011b0 <adc_mng_init>
	sensor_adc = adc_add_channel(ADC_SENSOR_CHANNEL);
 8002c1a:	200b      	movs	r0, #11
 8002c1c:	f7fe faac 	bl	8001178 <adc_add_channel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <tester_adc_init+0x100>)
 8002c26:	601a      	str	r2, [r3, #0]
//	adc_add_channel(ADC_NTC_CHANNEL	);
	cap_adc = adc_add_channel(ADC_CAP_CHANNEL);
 8002c28:	200d      	movs	r0, #13
 8002c2a:	f7fe faa5 	bl	8001178 <adc_add_channel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <tester_adc_init+0x104>)
 8002c34:	601a      	str	r2, [r3, #0]
	a_power_1 = adc_add_channel(A_POWER_1_CHANNEL);
 8002c36:	200e      	movs	r0, #14
 8002c38:	f7fe fa9e 	bl	8001178 <adc_add_channel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <tester_adc_init+0x108>)
 8002c42:	601a      	str	r2, [r3, #0]
	a_power_2 = adc_add_channel(A_POWER_2_CHANNEL);
 8002c44:	200f      	movs	r0, #15
 8002c46:	f7fe fa97 	bl	8001178 <adc_add_channel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <tester_adc_init+0x10c>)
 8002c50:	601a      	str	r2, [r3, #0]
	pir_power = adc_add_channel(POWER_CHANNEL);
 8002c52:	200a      	movs	r0, #10
 8002c54:	f7fe fa90 	bl	8001178 <adc_add_channel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <tester_adc_init+0x110>)
 8002c5e:	601a      	str	r2, [r3, #0]
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200001a0 	.word	0x200001a0
 8002c68:	40011000 	.word	0x40011000
 8002c6c:	40012400 	.word	0x40012400
 8002c70:	20000468 	.word	0x20000468
 8002c74:	20000470 	.word	0x20000470
 8002c78:	2000046c 	.word	0x2000046c
 8002c7c:	20000460 	.word	0x20000460
 8002c80:	20000464 	.word	0x20000464

08002c84 <system_init>:

	}
}


void system_init() {
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
	SystemInit();
 8002c8a:	f000 f88b 	bl	8002da4 <SystemInit>
	SystemCoreClockUpdate();
 8002c8e:	f000 f8bd 	bl	8002e0c <SystemCoreClockUpdate>
	uint64_t tick = SystemCoreClock / 1000;
 8002c92:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <system_init+0x108>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a3e      	ldr	r2, [pc, #248]	; (8002d90 <system_init+0x10c>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	f04f 0400 	mov.w	r4, #0
 8002ca2:	e887 0018 	stmia.w	r7, {r3, r4}
	SysTick_Config(tick);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fde1 	bl	8002870 <SysTick_Config>
	NVIC_EnableIRQ(15);
 8002cae:	200f      	movs	r0, #15
 8002cb0:	f7ff fd9c 	bl	80027ec <NVIC_EnableIRQ>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2004      	movs	r0, #4
 8002cb8:	f7fe f84e 	bl	8000d58 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	2008      	movs	r0, #8
 8002cc0:	f7fe f84a 	bl	8000d58 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	2010      	movs	r0, #16
 8002cc8:	f7fe f846 	bl	8000d58 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8002ccc:	2101      	movs	r1, #1
 8002cce:	2020      	movs	r0, #32
 8002cd0:	f7fe f842 	bl	8000d58 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cda:	f7fe f83d 	bl	8000d58 <RCC_APB2PeriphClockCmd>


	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);//RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8002cde:	2101      	movs	r1, #1
 8002ce0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ce4:	f7fe f856 	bl	8000d94 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002cee:	f7fe f833 	bl	8000d58 <RCC_APB2PeriphClockCmd>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7fe f82f 	bl	8000d58 <RCC_APB2PeriphClockCmd>

	AFIO->MAPR = 0;
 8002cfa:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <system_init+0x110>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
	AFIO->MAPR |= AFIO_MAPR_USART3_REMAP_PARTIALREMAP;
 8002d00:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <system_init+0x110>)
 8002d02:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <system_init+0x110>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f043 0310 	orr.w	r3, r3, #16
 8002d0a:	6053      	str	r3, [r2, #4]
//	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_DISABLE;



	power_selection_pin_init();
 8002d0c:	f7ff fdd2 	bl	80028b4 <power_selection_pin_init>
	mux_pin_init();
 8002d10:	f7ff fe1e 	bl	8002950 <mux_pin_init>
	nc_pin_init();
 8002d14:	f7ff fe4a 	bl	80029ac <nc_pin_init>

	debug_init();
 8002d18:	f7ff fe96 	bl	8002a48 <debug_init>
	tester_adc_init();
 8002d1c:	f7ff ff28 	bl	8002b70 <tester_adc_init>
	GPIO_WriteBit(MUX_EN_PORT,MUX_EN_PIN, OFF); //Enable multiplexer
 8002d20:	2200      	movs	r2, #0
 8002d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d26:	481c      	ldr	r0, [pc, #112]	; (8002d98 <system_init+0x114>)
 8002d28:	f7fd ff4f 	bl	8000bca <GPIO_WriteBit>
	BOARD_1(OFF);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2180      	movs	r1, #128	; 0x80
 8002d30:	481a      	ldr	r0, [pc, #104]	; (8002d9c <system_init+0x118>)
 8002d32:	f7fd ff4a 	bl	8000bca <GPIO_WriteBit>
	BOARD_2(OFF);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2140      	movs	r1, #64	; 0x40
 8002d3a:	4818      	ldr	r0, [pc, #96]	; (8002d9c <system_init+0x118>)
 8002d3c:	f7fd ff45 	bl	8000bca <GPIO_WriteBit>
	BOARD_3(OFF);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2120      	movs	r1, #32
 8002d44:	4815      	ldr	r0, [pc, #84]	; (8002d9c <system_init+0x118>)
 8002d46:	f7fd ff40 	bl	8000bca <GPIO_WriteBit>
	BOARD_4(OFF);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2110      	movs	r1, #16
 8002d4e:	4813      	ldr	r0, [pc, #76]	; (8002d9c <system_init+0x118>)
 8002d50:	f7fd ff3b 	bl	8000bca <GPIO_WriteBit>
	BOARD_5(OFF);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2108      	movs	r1, #8
 8002d58:	4810      	ldr	r0, [pc, #64]	; (8002d9c <system_init+0x118>)
 8002d5a:	f7fd ff36 	bl	8000bca <GPIO_WriteBit>
	BOARD_6(OFF);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2104      	movs	r1, #4
 8002d62:	480e      	ldr	r0, [pc, #56]	; (8002d9c <system_init+0x118>)
 8002d64:	f7fd ff31 	bl	8000bca <GPIO_WriteBit>
	BOARD_7(OFF);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	480b      	ldr	r0, [pc, #44]	; (8002d9c <system_init+0x118>)
 8002d6e:	f7fd ff2c 	bl	8000bca <GPIO_WriteBit>
	BOARD_8(OFF); // Turn all of the PIRs off
 8002d72:	2200      	movs	r2, #0
 8002d74:	2101      	movs	r1, #1
 8002d76:	4809      	ldr	r0, [pc, #36]	; (8002d9c <system_init+0x118>)
 8002d78:	f7fd ff27 	bl	8000bca <GPIO_WriteBit>
	printf("**Ready to test** \r\n");
 8002d7c:	4808      	ldr	r0, [pc, #32]	; (8002da0 <system_init+0x11c>)
 8002d7e:	f000 fb0d 	bl	800339c <puts>

}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000044 	.word	0x20000044
 8002d90:	10624dd3 	.word	0x10624dd3
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40011000 	.word	0x40011000
 8002d9c:	40010800 	.word	0x40010800
 8002da0:	080036e8 	.word	0x080036e8

08002da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <SystemInit+0x5c>)
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <SystemInit+0x5c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002db4:	4912      	ldr	r1, [pc, #72]	; (8002e00 <SystemInit+0x5c>)
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <SystemInit+0x5c>)
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <SystemInit+0x60>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002dc0:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <SystemInit+0x5c>)
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <SystemInit+0x5c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002dd0:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <SystemInit+0x5c>)
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <SystemInit+0x5c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dda:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002ddc:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <SystemInit+0x5c>)
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <SystemInit+0x5c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002de6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <SystemInit+0x5c>)
 8002dea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002dee:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002df0:	f000 f878 	bl	8002ee4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <SystemInit+0x64>)
 8002df6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dfa:	609a      	str	r2, [r3, #8]
#endif 
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	f8ff0000 	.word	0xf8ff0000
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <SystemCoreClockUpdate+0xc4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d007      	beq.n	8002e3e <SystemCoreClockUpdate+0x32>
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d009      	beq.n	8002e46 <SystemCoreClockUpdate+0x3a>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d133      	bne.n	8002e9e <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <SystemCoreClockUpdate+0xc8>)
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <SystemCoreClockUpdate+0xcc>)
 8002e3a:	601a      	str	r2, [r3, #0]
      break;
 8002e3c:	e033      	b.n	8002ea6 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002e3e:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <SystemCoreClockUpdate+0xc8>)
 8002e40:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <SystemCoreClockUpdate+0xcc>)
 8002e42:	601a      	str	r2, [r3, #0]
      break;
 8002e44:	e02f      	b.n	8002ea6 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <SystemCoreClockUpdate+0xc4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e4e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <SystemCoreClockUpdate+0xc4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e58:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	0c9b      	lsrs	r3, r3, #18
 8002e5e:	3302      	adds	r3, #2
 8002e60:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <SystemCoreClockUpdate+0xd0>)
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <SystemCoreClockUpdate+0xc8>)
 8002e72:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8002e74:	e017      	b.n	8002ea6 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <SystemCoreClockUpdate+0xc4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <SystemCoreClockUpdate+0xd0>)
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <SystemCoreClockUpdate+0xc8>)
 8002e8c:	6013      	str	r3, [r2, #0]
      break;
 8002e8e:	e00a      	b.n	8002ea6 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <SystemCoreClockUpdate+0xcc>)
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <SystemCoreClockUpdate+0xc8>)
 8002e9a:	6013      	str	r3, [r2, #0]
      break;
 8002e9c:	e003      	b.n	8002ea6 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <SystemCoreClockUpdate+0xc8>)
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <SystemCoreClockUpdate+0xcc>)
 8002ea2:	601a      	str	r2, [r3, #0]
      break;
 8002ea4:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <SystemCoreClockUpdate+0xc4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <SystemCoreClockUpdate+0xd4>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <SystemCoreClockUpdate+0xc8>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <SystemCoreClockUpdate+0xc8>)
 8002ec4:	6013      	str	r3, [r2, #0]
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	20000044 	.word	0x20000044
 8002ed8:	007a1200 	.word	0x007a1200
 8002edc:	003d0900 	.word	0x003d0900
 8002ee0:	20000048 	.word	0x20000048

08002ee4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002ee8:	f000 f802 	bl	8002ef0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	2300      	movs	r3, #0
 8002efc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002efe:	4a3a      	ldr	r2, [pc, #232]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f00:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002f0a:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <SetSysClockTo72+0x38>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002f26:	d1f0      	bne.n	8002f0a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002f28:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002f34:	2301      	movs	r3, #1
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	e001      	b.n	8002f3e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d14b      	bne.n	8002fdc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002f44:	4a29      	ldr	r2, [pc, #164]	; (8002fec <SetSysClockTo72+0xfc>)
 8002f46:	4b29      	ldr	r3, [pc, #164]	; (8002fec <SetSysClockTo72+0xfc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f043 0310 	orr.w	r3, r3, #16
 8002f4e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <SetSysClockTo72+0xfc>)
 8002f52:	4b26      	ldr	r3, [pc, #152]	; (8002fec <SetSysClockTo72+0xfc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002f5c:	4a23      	ldr	r2, [pc, #140]	; (8002fec <SetSysClockTo72+0xfc>)
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <SetSysClockTo72+0xfc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f6a:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002f70:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f82:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f8e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002f9a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002f9c:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002fa8:	bf00      	nop
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f9      	beq.n	8002faa <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002fb6:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f023 0303 	bic.w	r3, r3, #3
 8002fc0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002fce:	bf00      	nop
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <SetSysClockTo72+0xf8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d1f9      	bne.n	8002fd0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40022000 	.word	0x40022000

08002ff0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
	int div = 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003000:	e004      	b.n	800300c <ts_itoa+0x1c>
		div *= base;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	fbb2 f2f3 	udiv	r2, r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d2f3      	bcs.n	8003002 <ts_itoa+0x12>

	while (div != 0)
 800301a:	e029      	b.n	8003070 <ts_itoa+0x80>
	{
		int num = d/div;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	fbb3 f1f2 	udiv	r1, r3, r2
 800302e:	fb02 f201 	mul.w	r2, r2, r1
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	fb92 f3f3 	sdiv	r3, r2, r3
 800303e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b09      	cmp	r3, #9
 8003044:	dd0a      	ble.n	800305c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1c59      	adds	r1, r3, #1
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	6011      	str	r1, [r2, #0]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	3237      	adds	r2, #55	; 0x37
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e009      	b.n	8003070 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	1c59      	adds	r1, r3, #1
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	6011      	str	r1, [r2, #0]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	3230      	adds	r2, #48	; 0x30
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1d2      	bne.n	800301c <ts_itoa+0x2c>
	}
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003090:	e07d      	b.n	800318e <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b25      	cmp	r3, #37	; 0x25
 8003098:	d171      	bne.n	800317e <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3301      	adds	r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b64      	cmp	r3, #100	; 0x64
 80030a6:	d01e      	beq.n	80030e6 <ts_formatstring+0x66>
 80030a8:	2b64      	cmp	r3, #100	; 0x64
 80030aa:	dc06      	bgt.n	80030ba <ts_formatstring+0x3a>
 80030ac:	2b58      	cmp	r3, #88	; 0x58
 80030ae:	d050      	beq.n	8003152 <ts_formatstring+0xd2>
 80030b0:	2b63      	cmp	r3, #99	; 0x63
 80030b2:	d00e      	beq.n	80030d2 <ts_formatstring+0x52>
 80030b4:	2b25      	cmp	r3, #37	; 0x25
 80030b6:	d058      	beq.n	800316a <ts_formatstring+0xea>
 80030b8:	e05d      	b.n	8003176 <ts_formatstring+0xf6>
 80030ba:	2b73      	cmp	r3, #115	; 0x73
 80030bc:	d02b      	beq.n	8003116 <ts_formatstring+0x96>
 80030be:	2b73      	cmp	r3, #115	; 0x73
 80030c0:	dc02      	bgt.n	80030c8 <ts_formatstring+0x48>
 80030c2:	2b69      	cmp	r3, #105	; 0x69
 80030c4:	d00f      	beq.n	80030e6 <ts_formatstring+0x66>
 80030c6:	e056      	b.n	8003176 <ts_formatstring+0xf6>
 80030c8:	2b75      	cmp	r3, #117	; 0x75
 80030ca:	d037      	beq.n	800313c <ts_formatstring+0xbc>
 80030cc:	2b78      	cmp	r3, #120	; 0x78
 80030ce:	d040      	beq.n	8003152 <ts_formatstring+0xd2>
 80030d0:	e051      	b.n	8003176 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	60fa      	str	r2, [r7, #12]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	1d11      	adds	r1, r2, #4
 80030dc:	6079      	str	r1, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
				break;
 80030e4:	e047      	b.n	8003176 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	1d1a      	adds	r2, r3, #4
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da07      	bge.n	8003106 <ts_formatstring+0x86>
					{
						val *= -1;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	425b      	negs	r3, r3
 80030fa:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	60fa      	str	r2, [r7, #12]
 8003102:	222d      	movs	r2, #45	; 0x2d
 8003104:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003106:	69f9      	ldr	r1, [r7, #28]
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	220a      	movs	r2, #10
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff6e 	bl	8002ff0 <ts_itoa>
				}
				break;
 8003114:	e02f      	b.n	8003176 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	1d1a      	adds	r2, r3, #4
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003120:	e007      	b.n	8003132 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	60fa      	str	r2, [r7, #12]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	1c51      	adds	r1, r2, #1
 800312c:	61b9      	str	r1, [r7, #24]
 800312e:	7812      	ldrb	r2, [r2, #0]
 8003130:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f3      	bne.n	8003122 <ts_formatstring+0xa2>
					}
				}
				break;
 800313a:	e01c      	b.n	8003176 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1d1a      	adds	r2, r3, #4
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	220a      	movs	r2, #10
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff50 	bl	8002ff0 <ts_itoa>
				break;
 8003150:	e011      	b.n	8003176 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	1d1a      	adds	r2, r3, #4
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4619      	mov	r1, r3
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	2210      	movs	r2, #16
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ff44 	bl	8002ff0 <ts_itoa>
				break;
 8003168:	e005      	b.n	8003176 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	60fa      	str	r2, [r7, #12]
 8003170:	2225      	movs	r2, #37	; 0x25
 8003172:	701a      	strb	r2, [r3, #0]
				  break;
 8003174:	bf00      	nop
			}
			fmt++;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3301      	adds	r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	e007      	b.n	800318e <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	60fa      	str	r2, [r7, #12]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	1c51      	adds	r1, r2, #1
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	7812      	ldrb	r2, [r2, #0]
 800318c:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f47f af7d 	bne.w	8003092 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	461a      	mov	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
	int length = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80031be:	e081      	b.n	80032c4 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b25      	cmp	r3, #37	; 0x25
 80031c6:	d177      	bne.n	80032b8 <ts_formatlength+0x108>
		{
			++fmt;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3301      	adds	r3, #1
 80031cc:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	3b58      	subs	r3, #88	; 0x58
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d86a      	bhi.n	80032ae <ts_formatlength+0xfe>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <ts_formatlength+0x30>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	080032a1 	.word	0x080032a1
 80031e4:	080032af 	.word	0x080032af
 80031e8:	080032af 	.word	0x080032af
 80031ec:	080032af 	.word	0x080032af
 80031f0:	080032af 	.word	0x080032af
 80031f4:	080032af 	.word	0x080032af
 80031f8:	080032af 	.word	0x080032af
 80031fc:	080032af 	.word	0x080032af
 8003200:	080032af 	.word	0x080032af
 8003204:	080032af 	.word	0x080032af
 8003208:	080032af 	.word	0x080032af
 800320c:	08003265 	.word	0x08003265
 8003210:	08003273 	.word	0x08003273
 8003214:	080032af 	.word	0x080032af
 8003218:	080032af 	.word	0x080032af
 800321c:	080032af 	.word	0x080032af
 8003220:	080032af 	.word	0x080032af
 8003224:	08003273 	.word	0x08003273
 8003228:	080032af 	.word	0x080032af
 800322c:	080032af 	.word	0x080032af
 8003230:	080032af 	.word	0x080032af
 8003234:	080032af 	.word	0x080032af
 8003238:	080032af 	.word	0x080032af
 800323c:	080032af 	.word	0x080032af
 8003240:	080032af 	.word	0x080032af
 8003244:	080032af 	.word	0x080032af
 8003248:	080032af 	.word	0x080032af
 800324c:	08003281 	.word	0x08003281
 8003250:	080032af 	.word	0x080032af
 8003254:	08003273 	.word	0x08003273
 8003258:	080032af 	.word	0x080032af
 800325c:	080032af 	.word	0x080032af
 8003260:	080032a1 	.word	0x080032a1
			{
			  case 'c':
		  		  va_arg(va, int);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3304      	adds	r3, #4
 8003268:	603b      	str	r3, [r7, #0]
				  ++length;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
				  break;
 8003270:	e025      	b.n	80032be <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	330b      	adds	r3, #11
 8003276:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	3304      	adds	r3, #4
 800327c:	603b      	str	r3, [r7, #0]
				  break;
 800327e:	e01e      	b.n	80032be <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	1d1a      	adds	r2, r3, #4
 8003284:	603a      	str	r2, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800328a:	e002      	b.n	8003292 <ts_formatlength+0xe2>
			  			  ++length;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	60ba      	str	r2, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f6      	bne.n	800328c <ts_formatlength+0xdc>
			  	  }
				  break;
 800329e:	e00e      	b.n	80032be <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3308      	adds	r3, #8
 80032a4:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	3304      	adds	r3, #4
 80032aa:	603b      	str	r3, [r7, #0]
				  break;
 80032ac:	e007      	b.n	80032be <ts_formatlength+0x10e>
			  default:
				  ++length;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3301      	adds	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
				  break;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3301      	adds	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3301      	adds	r3, #1
 80032c2:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f af79 	bne.w	80031c0 <ts_formatlength+0x10>
	}
	return length;
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop

080032dc <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80032dc:	b40e      	push	{r1, r2, r3}
 80032de:	b580      	push	{r7, lr}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80032e6:	f107 0320 	add.w	r3, r7, #32
 80032ea:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	69f9      	ldr	r1, [r7, #28]
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff fec5 	bl	8003080 <ts_formatstring>
 80032f6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80032f8:	68fb      	ldr	r3, [r7, #12]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003304:	b003      	add	sp, #12
 8003306:	4770      	bx	lr

08003308 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8003308:	b40f      	push	{r0, r1, r2, r3}
 800330a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
	int length = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8003316:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800331a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003320:	f7ff ff46 	bl	80031b0 <ts_formatlength>
 8003324:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8003326:	466b      	mov	r3, sp
 8003328:	461e      	mov	r6, r3
		char buf[length];
 800332a:	68f9      	ldr	r1, [r7, #12]
 800332c:	1e4b      	subs	r3, r1, #1
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	460b      	mov	r3, r1
 8003332:	461a      	mov	r2, r3
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800333c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8003340:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8003344:	460b      	mov	r3, r1
 8003346:	461a      	mov	r2, r3
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	00dd      	lsls	r5, r3, #3
 800334e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003352:	00d4      	lsls	r4, r2, #3
 8003354:	460b      	mov	r3, r1
 8003356:	3307      	adds	r3, #7
 8003358:	08db      	lsrs	r3, r3, #3
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	ebad 0d03 	sub.w	sp, sp, r3
 8003360:	466b      	mov	r3, sp
 8003362:	3300      	adds	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8003366:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800336a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fe84 	bl	8003080 <ts_formatstring>
 8003378:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4619      	mov	r1, r3
 8003380:	2001      	movs	r0, #1
 8003382:	f7ff fa16 	bl	80027b2 <_write>
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003396:	b004      	add	sp, #16
 8003398:	4770      	bx	lr
	...

0800339c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7fc ff49 	bl	800023c <strlen>
 80033aa:	4603      	mov	r3, r0
 80033ac:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	2001      	movs	r0, #1
 80033b8:	f7ff f9fb 	bl	80027b2 <_write>
 80033bc:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 80033be:	2201      	movs	r2, #1
 80033c0:	490b      	ldr	r1, [pc, #44]	; (80033f0 <puts+0x54>)
 80033c2:	2001      	movs	r0, #1
 80033c4:	f7ff f9f5 	bl	80027b2 <_write>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d102      	bne.n	80033e0 <puts+0x44>
	{
		res = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e002      	b.n	80033e6 <puts+0x4a>
	}
	else
	{
		res = EOF;
 80033e0:	f04f 33ff 	mov.w	r3, #4294967295
 80033e4:	617b      	str	r3, [r7, #20]
	}

	return res;
 80033e6:	697b      	ldr	r3, [r7, #20]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	080036fc 	.word	0x080036fc

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	2500      	movs	r5, #0
 80033f8:	4e0c      	ldr	r6, [pc, #48]	; (800342c <__libc_init_array+0x38>)
 80033fa:	4c0d      	ldr	r4, [pc, #52]	; (8003430 <__libc_init_array+0x3c>)
 80033fc:	1ba4      	subs	r4, r4, r6
 80033fe:	10a4      	asrs	r4, r4, #2
 8003400:	42a5      	cmp	r5, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	f000 f82e 	bl	8003464 <_init>
 8003408:	2500      	movs	r5, #0
 800340a:	4e0a      	ldr	r6, [pc, #40]	; (8003434 <__libc_init_array+0x40>)
 800340c:	4c0a      	ldr	r4, [pc, #40]	; (8003438 <__libc_init_array+0x44>)
 800340e:	1ba4      	subs	r4, r4, r6
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	42a5      	cmp	r5, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800341c:	4798      	blx	r3
 800341e:	3501      	adds	r5, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003426:	4798      	blx	r3
 8003428:	3501      	adds	r5, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08003700 	.word	0x08003700
 8003430:	08003700 	.word	0x08003700
 8003434:	08003700 	.word	0x08003700
 8003438:	08003704 	.word	0x08003704

0800343c <memcpy>:
 800343c:	b510      	push	{r4, lr}
 800343e:	1e43      	subs	r3, r0, #1
 8003440:	440a      	add	r2, r1
 8003442:	4291      	cmp	r1, r2
 8003444:	d100      	bne.n	8003448 <memcpy+0xc>
 8003446:	bd10      	pop	{r4, pc}
 8003448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003450:	e7f7      	b.n	8003442 <memcpy+0x6>

08003452 <memset>:
 8003452:	4603      	mov	r3, r0
 8003454:	4402      	add	r2, r0
 8003456:	4293      	cmp	r3, r2
 8003458:	d100      	bne.n	800345c <memset+0xa>
 800345a:	4770      	bx	lr
 800345c:	f803 1b01 	strb.w	r1, [r3], #1
 8003460:	e7f9      	b.n	8003456 <memset+0x4>
	...

08003464 <_init>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr

08003470 <_fini>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr
